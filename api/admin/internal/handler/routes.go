// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5

package handler

import (
	"net/http"

	admin_systemaccount "github.com/DrReMain/cyber-ecosystem-server/api/admin/internal/handler/admin_system/account"
	admin_systembase "github.com/DrReMain/cyber-ecosystem-server/api/admin/internal/handler/admin_system/base"
	admin_systemdepartment "github.com/DrReMain/cyber-ecosystem-server/api/admin/internal/handler/admin_system/department"
	admin_systemmenu "github.com/DrReMain/cyber-ecosystem-server/api/admin/internal/handler/admin_system/menu"
	admin_systemposition "github.com/DrReMain/cyber-ecosystem-server/api/admin/internal/handler/admin_system/position"
	admin_systemrole "github.com/DrReMain/cyber-ecosystem-server/api/admin/internal/handler/admin_system/role"
	admin_systemuser "github.com/DrReMain/cyber-ecosystem-server/api/admin/internal/handler/admin_system/user"
	"github.com/DrReMain/cyber-ecosystem-server/api/admin/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login_password",
				Handler: admin_systemaccount.LoginPasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/refresh",
				Handler: admin_systemaccount.RefreshHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/admin_system/account"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/info",
					Handler: admin_systemaccount.AccountInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/logout",
					Handler: admin_systemaccount.LogoutHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/admin_system/account"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/init",
				Handler: admin_systembase.InitHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/admin_system/base"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: admin_systemdepartment.CreateDepartmentHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: admin_systemdepartment.QueryDepartmentHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id",
					Handler: admin_systemdepartment.DeleteDepartmentOneHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/:id",
					Handler: admin_systemdepartment.UpdateDepartmentHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: admin_systemdepartment.GetDepartmentHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: admin_systemdepartment.DeleteDepartmentHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/admin_system/department"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: admin_systemmenu.CreateMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: admin_systemmenu.QueryMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id",
					Handler: admin_systemmenu.DeleteMenuOneHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/:id",
					Handler: admin_systemmenu.UpdateMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: admin_systemmenu.GetMenuHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: admin_systemmenu.DeleteMenuHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/admin_system/menu"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: admin_systemposition.CreatePositionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: admin_systemposition.QueryPositionHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id",
					Handler: admin_systemposition.DeletePositionOneHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/:id",
					Handler: admin_systemposition.UpdatePositionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: admin_systemposition.GetPositionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: admin_systemposition.DeletePositionHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/admin_system/position"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: admin_systemrole.CreateRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: admin_systemrole.QueryRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id",
					Handler: admin_systemrole.DeleteRoleOneHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/:id",
					Handler: admin_systemrole.UpdateRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: admin_systemrole.GetRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: admin_systemrole.DeleteRoleHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/admin_system/role"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Auth},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/",
					Handler: admin_systemuser.CreateUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/",
					Handler: admin_systemuser.QueryUserHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/:id",
					Handler: admin_systemuser.DeleteUserOneHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/:id",
					Handler: admin_systemuser.UpdateUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/:id",
					Handler: admin_systemuser.GetUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/byemail",
					Handler: admin_systemuser.GetUserByEmailHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: admin_systemuser.DeleteUserHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/admin_system/user"),
	)
}
