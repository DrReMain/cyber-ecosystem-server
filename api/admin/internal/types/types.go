// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5

package types

type AccountInfoReq struct {
}

type AccountInfoRes struct {
	*CommonRes
	Result *InfoBody `json:"result"`
}

type CommonPageRes struct {
	PageNo   uint64 `json:"page_no"`
	PageSize uint64 `json:"page_size"`
	Total    uint64 `json:"total"`
	More     bool   `json:"more"`
}

type CommonRes struct {
	T       string `json:"t"`
	Success bool   `json:"success"`
	Code    string `json:"code"`
	Msg     string `json:"msg"`
	Result  string `json:"result"`
}

type DepartmentCreateReq struct {
	Sort           *uint32 `json:"sort,optional" validate:"omitempty,gte=0"`
	DepartmentName *string `json:"department_name,optional" validate:"required,max=255"`
	Remark         *string `json:"remark,optional" validate:"omitempty,max=255"`
	ParentID       *string `json:"parent_id,optional" validate:"omitempty,len=20"`
}

type DepartmentCreateRes struct {
	*CommonRes
	Result *string `json:"result"`
}

type DepartmentDeleteReq struct {
	ID *string `path:"id" validate:"required,len=20"`
}

type DepartmentDeleteRes struct {
	*CommonRes
}

type DepartmentGet struct {
	ID             *string          `json:"id"`
	CreatedAt      *int64           `json:"created_at"`
	UpdatedAt      *int64           `json:"updated_at"`
	Sort           *uint32          `json:"sort"`
	DepartmentName *string          `json:"department_name"`
	Remark         *string          `json:"remark"`
	ParentID       *string          `json:"parent_id"`
	Path           *string          `json:"path"`
	Level          *uint32          `json:"level"`
	Children       []*DepartmentGet `json:"children"`
}

type DepartmentGetReq struct {
	ID *string `path:"id" validate:"required,len=20"`
}

type DepartmentGetRes struct {
	*CommonRes
	Result *DepartmentGet `json:"result"`
}

type DepartmentQuery struct {
	*CommonPageRes
	List []*DepartmentGet `json:"list"`
}

type DepartmentQueryReq struct {
	PageNo   *uint64 `form:"page_no,optional" validate:"omitempty,gte=0"`
	PageSize *uint64 `form:"page_size,optional" validate:"omitempty,gte=0"`
}

type DepartmentQueryRes struct {
	*CommonRes
	Result *DepartmentQuery `json:"result"`
}

type DepartmentUpdateReq struct {
	ID             *string `path:"id" validate:"required,len=20"`
	Sort           *uint32 `json:"sort,optional" validate:"omitempty,gte=0"`
	DepartmentName *string `json:"department_name,optional" validate:"omitempty,max=255"`
	Remark         *string `json:"remark,optional" validate:"omitempty,max=255"`
	ParentID       *string `json:"parent_id,optional" validate:"omitempty,len=20"`
}

type DepartmentUpdateRes struct {
	*CommonRes
}

type Empty struct {
}

type IDsReq struct {
	IDs []string `json:"ids,optional" validate:"required,min=1"`
}

type InfoBody struct {
	Email    *string `json:"email"`
	Name     *string `json:"name"`
	Nickname *string `json:"nickname"`
	Phone    *string `json:"phone"`
	Avatar   *string `json:"avatar"`
	Menus    []*Menu `json:"menus"`
}

type InitReq struct {
}

type LoginPasswordReq struct {
	Email    *string `json:"email,optional" validate:"required,email"`
	Password *string `json:"password,optional" validate:"required"`
}

type LoginPasswordRes struct {
	*CommonRes
	Result *Token `json:"result"`
}

type LogoutReq struct {
}

type LogoutRes struct {
	*CommonRes
}

type Menu struct {
	CodePath *string `json:"code_path"`
	Icon     *string `json:"icon"`
	MenuType *string `json:"menu_type"`
	Children []*Menu `json:"children"`
}

type MenuCreateReq struct {
	Sort       *uint32     `json:"sort,optional" validate:"omitempty,gte=0"`
	Title      *string     `json:"title,optional" validate:"required,max=255"`
	Icon       *string     `json:"icon,optional" validate:"omitempty,max=512"`
	Code       *string     `json:"code,optional" validate:"required,max=255"`
	ParentID   *string     `json:"parent_id,optional" validate:"omitempty,len=20"`
	MenuType   *string     `json:"menu_type,optional" validate:"required,oneof=page button"`
	Properties *string     `json:"properties,optional" validate:"omitempty,max=2048"`
	Resources  []*Resource `json:"resources,optional" validate:"omitempty"`
}

type MenuCreateRes struct {
	*CommonRes
	Result *string `json:"result"`
}

type MenuDeleteReq struct {
	ID *string `path:"id" validate:"required,len=20"`
}

type MenuDeleteRes struct {
	*CommonRes
}

type MenuGet struct {
	ID         *string     `json:"id"`
	CreatedAt  *int64      `json:"created_at"`
	UpdatedAt  *int64      `json:"updated_at"`
	Sort       *uint32     `json:"sort"`
	Status     *uint8      `json:"status,optional"`
	Title      *string     `json:"title"`
	Icon       *string     `json:"icon"`
	Code       *string     `json:"code"`
	CodePath   *string     `json:"code_path"`
	ParentID   *string     `json:"parent_id"`
	MenuType   *string     `json:"menu_type"`
	Level      *uint32     `json:"level"`
	Properties *string     `json:"properties"`
	Resources  []*Resource `json:"resources"`
	Children   []*MenuGet  `json:"children"`
}

type MenuGetReq struct {
	ID *string `path:"id" validate:"required,len=20"`
}

type MenuGetRes struct {
	*CommonRes
	Result *MenuGet `json:"result"`
}

type MenuQuery struct {
	List []*MenuGet `json:"list"`
}

type MenuQueryReq struct {
}

type MenuQueryRes struct {
	*CommonRes
	Result *MenuQuery `json:"result"`
}

type MenuUpdateReq struct {
	ID         *string     `path:"id" validate:"required,len=20"`
	Sort       *uint32     `json:"sort,optional" validate:"omitempty,gte=0"`
	Status     *uint8      `json:"status,optional" validate:"omitempty,oneof=1 2"`
	Title      *string     `json:"title,optional" validate:"omitempty,max=255"`
	Icon       *string     `json:"icon,optional" validate:"omitempty,max=512"`
	Properties *string     `json:"properties,optional" validate:"omitempty,max=2048"`
	Resources  []*Resource `json:"resources,optional" validate:"omitempty"`
}

type MenuUpdateRes struct {
	*CommonRes
}

type PositionCreateReq struct {
	Sort         *uint32 `json:"sort,optional" validate:"omitempty,gte=0"`
	PositionName *string `json:"position_name,optional" validate:"required,max=255"`
	Code         *string `json:"code,optional" validate:"required,max=255"`
	Remark       *string `json:"remark,optional" validate:"omitempty,max=255"`
}

type PositionCreateRes struct {
	*CommonRes
	Result *string `json:"result"`
}

type PositionDeleteReq struct {
	ID *string `path:"id" validate:"required,len=20"`
}

type PositionDeleteRes struct {
	*CommonRes
}

type PositionGet struct {
	ID           *string `json:"id"`
	CreatedAt    *int64  `json:"created_at"`
	UpdatedAt    *int64  `json:"updated_at"`
	Sort         *uint32 `json:"sort"`
	PositionName *string `json:"position_name"`
	Code         *string `json:"code"`
	Remark       *string `json:"remark"`
}

type PositionGetReq struct {
	ID *string `path:"id" validate:"required,len=20"`
}

type PositionGetRes struct {
	*CommonRes
	Result *PositionGet `json:"result"`
}

type PositionQuery struct {
	*CommonPageRes
	List []*PositionGet `json:"list"`
}

type PositionQueryReq struct {
	PageNo       *uint64 `form:"page_no,optional" validate:"omitempty,gte=0"`
	PageSize     *uint64 `form:"page_size,optional" validate:"omitempty,gte=0"`
	CreatedAt    []int64 `form:"created_at,optional" validate:"omitempty,max=2"`
	UpdatedAt    []int64 `form:"updated_at,optional" validate:"omitempty,max=2"`
	PositionName *string `form:"position_name,optional"`
	Code         *string `form:"code,optional"`
}

type PositionQueryRes struct {
	*CommonRes
	Result *PositionQuery `json:"result"`
}

type PositionUpdateReq struct {
	ID           *string `path:"id" validate:"required,len=20"`
	Sort         *uint32 `json:"sort,optional" validate:"omitempty,gte=0"`
	PositionName *string `json:"position_name,optional" validate:"omitempty,max=255"`
	Code         *string `json:"code,optional" validate:"omitempty,max=255"`
	Remark       *string `json:"remark,optional" validate:"omitempty,max=255"`
}

type PositionUpdateRes struct {
	*CommonRes
}

type RefreshReq struct {
	RefreshToken *string `json:"refresh_token,optional" validate:"required"`
}

type RefreshRes struct {
	*CommonRes
	Result *Token `json:"result"`
}

type Resource struct {
	Method *string `json:"method,optional" validate:"required,max=32"`
	Path   *string `json:"path,optional" validate:"required,max=512"`
}

type RoleCreateReq struct {
	Sort     *uint32  `json:"sort,optional" validate:"omitempty,gte=0"`
	RoleName *string  `json:"role_name,optional" validate:"required,max=255"`
	Code     *string  `json:"code,optional" validate:"required,max=255"`
	Remark   *string  `json:"remark,optional" validate:"omitempty,max=255"`
	MenuIds  []string `json:"menu_ids,optional" validate:"omitempty"`
}

type RoleCreateRes struct {
	*CommonRes
	Result *string `json:"result"`
}

type RoleDeleteReq struct {
	ID *string `path:"id" validate:"required,len=20"`
}

type RoleDeleteRes struct {
	*CommonRes
}

type RoleGet struct {
	ID        *string  `json:"id"`
	CreatedAt *int64   `json:"created_at"`
	UpdatedAt *int64   `json:"updated_at"`
	Sort      *uint32  `json:"sort"`
	RoleName  *string  `json:"role_name"`
	Code      *string  `json:"code"`
	Remark    *string  `json:"remark"`
	MenuIds   []string `json:"menu_ids"`
}

type RoleGetReq struct {
	ID *string `path:"id" validate:"required,len=20"`
}

type RoleGetRes struct {
	*CommonRes
	Result *RoleGet `json:"result"`
}

type RoleQuery struct {
	*CommonPageRes
	List []*RoleGet `json:"list"`
}

type RoleQueryReq struct {
	PageNo    *uint64 `form:"page_no,optional" validate:"omitempty,gte=0"`
	PageSize  *uint64 `form:"page_size,optional" validate:"omitempty,gte=0"`
	CreatedAt []int64 `form:"created_at,optional" validate:"omitempty,max=2"`
	UpdatedAt []int64 `form:"updated_at,optional" validate:"omitempty,max=2"`
	RoleName  *string `form:"role_name,optional"`
	Code      *string `form:"code,optional"`
}

type RoleQueryRes struct {
	*CommonRes
	Result *RoleQuery `json:"result"`
}

type RoleUpdateReq struct {
	ID       *string  `path:"id" validate:"required,len=20"`
	Sort     *uint32  `json:"sort,optional" validate:"omitempty,gte=0"`
	RoleName *string  `json:"role_name,optional" validate:"omitempty,max=255"`
	Code     *string  `json:"code,optional" validate:"omitempty,max=255"`
	Remark   *string  `json:"remark,optional" validate:"omitempty,max=255"`
	MenuIds  []string `json:"menu_ids,optional" validate:"omitempty"`
}

type RoleUpdateRes struct {
	*CommonRes
}

type Token struct {
	AccessToken   *string `json:"access_token"`
	AccessExpire  *int64  `json:"access_expire"`
	RefreshToken  *string `json:"refresh_token"`
	RefreshExpire *int64  `json:"refresh_expire"`
}

type UserCreateReq struct {
	Password     *string  `json:"password,optional" validate:"required,min=6"`
	Confirm      *string  `json:"confirm,optional" validate:"required"`
	Email        *string  `json:"email,optional" validate:"required,email,max=255"`
	Name         *string  `json:"name,optional" validate:"omitempty,max=255"`
	NickName     *string  `json:"nickname,optional" validate:"omitempty,max=255"`
	Phone        *string  `json:"phone,optional" validate:"omitempty,number"`
	Avatar       *string  `json:"avatar,optional" validate:"omitempty,max=1024"`
	Remark       *string  `json:"remark,optional" validate:"omitempty,max=255"`
	DepartmentID *string  `json:"department_id,optional" validate:"omitempty,len=20"`
	PositionIDs  []string `json:"position_ids,optional" validate:"omitempty"`
	RoleIDs      []string `json:"role_ids,optional" validate:"omitempty"`
}

type UserCreateRes struct {
	*CommonRes
	Result *string `json:"result"`
}

type UserDeleteReq struct {
	ID *string `path:"id" validate:"required,len=20"`
}

type UserDeleteRes struct {
	*CommonRes
}

type UserGet struct {
	ID         *string        `json:"id"`
	CreatedAt  *int64         `json:"created_at"`
	UpdatedAt  *int64         `json:"updated_at"`
	Status     *uint8         `json:"status"`
	Email      *string        `json:"email"`
	Name       *string        `json:"name"`
	NickName   *string        `json:"nickname"`
	Phone      *string        `json:"phone"`
	Avatar     *string        `json:"avatar"`
	Remark     *string        `json:"remark"`
	Department *DepartmentGet `json:"department"`
	Positions  []*PositionGet `json:"positions"`
	Roles      []*RoleGet     `json:"roles"`
}

type UserGetByEmailReq struct {
	Email *string `form:"email,optional" validate:"required"`
}

type UserGetReq struct {
	ID *string `path:"id" validate:"required,len=20"`
}

type UserGetRes struct {
	*CommonRes
	Result *UserGet `json:"result"`
}

type UserQuery struct {
	*CommonPageRes
	List []*UserGet `json:"list"`
}

type UserQueryReq struct {
	PageNo        *uint64  `form:"page_no,optional" validate:"omitempty,gte=0"`
	PageSize      *uint64  `form:"page_size,optional" validate:"omitempty,lte=100"`
	CreatedAt     []int64  `form:"created_at,optional" validate:"omitempty,max=2"`
	UpdatedAt     []int64  `form:"updated_at,optional" validate:"omitempty,max=2"`
	Status        *uint8   `form:"status,optional" validate:"omitempty,oneof=1 2"`
	Email         *string  `form:"email,optional" validate:"omitempty"`
	Name          *string  `form:"name,optional"`
	NickName      *string  `form:"nickname,optional"`
	Phone         *string  `form:"phone,optional"`
	DepartmentIDs []string `form:"department_ids,optional"`
	PositionIDs   []string `form:"position_ids,optional"`
	RoleIDs       []string `form:"role_ids,optional"`
}

type UserQueryRes struct {
	*CommonRes
	Result *UserQuery `json:"result"`
}

type UserUpdateReq struct {
	ID           *string  `path:"id" validate:"required,len=20"`
	Status       *uint8   `json:"status,optional" validate:"omitempty,oneof=1 2"`
	Password     *string  `json:"password,optional" validate:"omitempty,min=6"`
	Confirm      *string  `json:"confirm,optional" validate:"omitempty"`
	Email        *string  `json:"email,optional" validate:"omitempty,email,max=255"`
	Name         *string  `json:"name,optional" validate:"omitempty,max=255"`
	NickName     *string  `json:"nickname,optional" validate:"omitempty,max=255"`
	Phone        *string  `json:"phone,optional" validate:"omitempty,number"`
	Avatar       *string  `json:"avatar,optional" validate:"omitempty,max=1024"`
	Remark       *string  `json:"remark,optional" validate:"omitempty,max=255"`
	DepartmentID *string  `json:"department_id,optional" validate:"omitempty,len=20"`
	PositionIDs  []string `json:"position_ids,optional" validate:"omitempty"`
	RoleIDs      []string `json:"role_ids,optional" validate:"omitempty"`
}

type UserUpdateRes struct {
	*CommonRes
}
