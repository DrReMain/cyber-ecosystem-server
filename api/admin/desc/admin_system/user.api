import "../common.api"
import "./department.api"
import "./position.api"
import "./role.api"

info (
	title: "user API"
	desc:  ""
)

type (
	UserCreateReq {
		Password     *string  `json:"password,optional" validate:"required,min=6"`
		Confirm      *string  `json:"confirm,optional" validate:"required"`
		Email        *string  `json:"email,optional" validate:"required,email,max=255"`
		Name         *string  `json:"name,optional" validate:"omitempty,max=255"`
		NickName     *string  `json:"nickname,optional" validate:"omitempty,max=255"`
		Phone        *string  `json:"phone,optional" validate:"omitempty,number"`
		Avatar       *string  `json:"avatar,optional" validate:"omitempty,max=1024"`
		Remark       *string  `json:"remark,optional" validate:"omitempty,max=255"`
		DepartmentID *string  `json:"department_id,optional" validate:"omitempty,len=20"`
		PositionIDs  []string `json:"position_ids,optional" validate:"omitempty"`
		RoleIDs      []string `json:"role_ids,optional" validate:"omitempty"`
	}
	UserCreateRes {
		*CommonRes
		Result *string `json:"result"`
	}
	UserDeleteReq {
		ID *string `path:"id" validate:"required,len=20"`
	}
	UserDeleteRes {
		*CommonRes
	}
	UserUpdateReq {
		ID           *string  `path:"id" validate:"required,len=20"`
		Status       *uint8   `json:"status,optional" validate:"omitempty,oneof=1 2"`
		Password     *string  `json:"password,optional" validate:"omitempty,min=6"`
		Confirm      *string  `json:"confirm,optional" validate:"omitempty"`
		Email        *string  `json:"email,optional" validate:"omitempty,email,max=255"`
		Name         *string  `json:"name,optional" validate:"omitempty,max=255"`
		NickName     *string  `json:"nickname,optional" validate:"omitempty,max=255"`
		Phone        *string  `json:"phone,optional" validate:"omitempty,number"`
		Avatar       *string  `json:"avatar,optional" validate:"omitempty,max=1024"`
		Remark       *string  `json:"remark,optional" validate:"omitempty,max=255"`
		DepartmentID *string  `json:"department_id,optional" validate:"omitempty,len=20"`
		PositionIDs  []string `json:"position_ids,optional" validate:"omitempty"`
		RoleIDs      []string `json:"role_ids,optional" validate:"omitempty"`
	}
	UserUpdateRes {
		*CommonRes
	}
	UserGet {
		ID         *string        `json:"id"`
		CreatedAt  *int64         `json:"created_at"`
		UpdatedAt  *int64         `json:"updated_at"`
		Status     *uint8         `json:"status"`
		Email      *string        `json:"email"`
		Name       *string        `json:"name"`
		NickName   *string        `json:"nickname"`
		Phone      *string        `json:"phone"`
		Avatar     *string        `json:"avatar"`
		Remark     *string        `json:"remark"`
		Department *DepartmentGet `json:"department"`
		Positions  []*PositionGet `json:"positions"`
		Roles      []*RoleGet     `json:"roles"`
	}
	UserGetReq {
		ID *string `path:"id" validate:"required,len=20"`
	}
	UserGetByEmailReq {
		Email *string `form:"email,optional" validate:"required"`
	}
	UserGetRes {
		*CommonRes
		Result *UserGet `json:"result"`
	}
	UserQuery {
		*CommonPageRes
		List []*UserGet `json:"list"`
	}
	UserQueryReq {
		PageNo        *uint64  `form:"page_no,optional" validate:"omitempty,gte=0"`
		PageSize      *uint64  `form:"page_size,optional" validate:"omitempty,lte=100"`
		CreatedAt     []int64  `form:"created_at,optional" validate:"omitempty,max=2"`
		UpdatedAt     []int64  `form:"updated_at,optional" validate:"omitempty,max=2"`
		Status        *uint8   `form:"status,optional" validate:"omitempty,oneof=1 2"`
		Email         *string  `form:"email,optional" validate:"omitempty"`
		Name          *string  `form:"name,optional"`
		NickName      *string  `form:"nickname,optional"`
		Phone         *string  `form:"phone,optional"`
		DepartmentIDs []string `form:"department_ids,optional"`
		PositionIDs   []string `form:"position_ids,optional"`
		RoleIDs       []string `form:"role_ids,optional"`
	}
	UserQueryRes {
		*CommonRes
		Result *UserQuery `json:"result"`
	}
)

@server (
	jwt:        Auth
	middleware: Auth
	group:      admin_system/user
	prefix:     /api/v1/admin_system/user
)
service admin {
	@handler createUser
	post / (UserCreateReq) returns (UserCreateRes)

	@handler deleteUser
	post /delete (IDsReq) returns (CommonRes)

	@handler deleteUserOne
	delete /:id (UserDeleteReq) returns (UserDeleteRes)

	@handler updateUser
	put /:id (UserUpdateReq) returns (UserUpdateRes)

	@handler getUser
	get /:id (UserGetReq) returns (UserGetRes)

	@handler queryUser
	get / (UserQueryReq) returns (UserQueryRes)

	@handler getUserByEmail
	get /byemail (UserGetByEmailReq) returns (UserGetRes)
}

