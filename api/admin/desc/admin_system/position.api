import "../common.api"

info (
	title: "position API"
	desc:  ""
)

type (
	PositionCreateReq {
		Sort         *uint32 `json:"sort,optional" validate:"omitempty,gte=0"`
		PositionName *string `json:"position_name,optional" validate:"required,max=255"`
		Code         *string `json:"code,optional" validate:"required,max=255"`
		Remark       *string `json:"remark,optional" validate:"omitempty,max=255"`
	}
	PositionCreateRes {
		*CommonRes
		Result *string `json:"result"`
	}
	PositionDeleteReq {
		ID *string `path:"id" validate:"required,len=20"`
	}
	PositionDeleteRes {
		*CommonRes
	}
	PositionUpdateReq {
		ID           *string `path:"id" validate:"required,len=20"`
		Sort         *uint32 `json:"sort,optional" validate:"omitempty,gte=0"`
		PositionName *string `json:"position_name,optional" validate:"omitempty,max=255"`
		Code         *string `json:"code,optional" validate:"omitempty,max=255"`
		Remark       *string `json:"remark,optional" validate:"omitempty,max=255"`
	}
	PositionUpdateRes {
		*CommonRes
	}
	PositionGet {
		ID           *string `json:"id"`
		CreatedAt    *int64  `json:"created_at"`
		UpdatedAt    *int64  `json:"updated_at"`
		Sort         *uint32 `json:"sort"`
		PositionName *string `json:"position_name"`
		Code         *string `json:"code"`
		Remark       *string `json:"remark"`
	}
	PositionGetReq {
		ID *string `path:"id" validate:"required,len=20"`
	}
	PositionGetRes {
		*CommonRes
		Result *PositionGet `json:"result"`
	}
	PositionQuery {
		*CommonPageRes
		List []*PositionGet `json:"list"`
	}
	PositionQueryReq {
		PageNo       *uint64 `form:"page_no,optional" validate:"omitempty,gte=0"`
		PageSize     *uint64 `form:"page_size,optional" validate:"omitempty,gte=0"`
		CreatedAt    []int64 `form:"created_at,optional" validate:"omitempty,max=2"`
		UpdatedAt    []int64 `form:"updated_at,optional" validate:"omitempty,max=2"`
		PositionName *string `form:"position_name,optional"`
		Code         *string `form:"code,optional"`
	}
	PositionQueryRes {
		*CommonRes
		Result *PositionQuery `json:"result"`
	}
)

@server (
	jwt:        Auth
	middleware: Auth
	group:      admin_system/position
	prefix:     /api/v1/admin_system/position
)
service admin {

	@handler createPosition
	post / (PositionCreateReq) returns (PositionCreateRes)


	@handler deletePosition
	post /delete (IDsReq) returns (CommonRes)


	@handler deletePositionOne
	delete /:id (PositionDeleteReq) returns (PositionDeleteRes)


	@handler updatePosition
	put /:id (PositionUpdateReq) returns (PositionUpdateRes)


	@handler getPosition
	get /:id (PositionGetReq) returns (PositionGetRes)


	@handler queryPosition
	get / (PositionQueryReq) returns (PositionQueryRes)
}

