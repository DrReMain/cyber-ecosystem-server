// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: rpc/admin_system/admin_system.proto

package admin_system

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{0}
}

type IDReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IDReq) Reset() {
	*x = IDReq{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDReq) ProtoMessage() {}

func (x *IDReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDReq.ProtoReflect.Descriptor instead.
func (*IDReq) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{1}
}

func (x *IDReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type IDsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IDsReq) Reset() {
	*x = IDsReq{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDsReq) ProtoMessage() {}

func (x *IDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDsReq.ProtoReflect.Descriptor instead.
func (*IDsReq) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{2}
}

func (x *IDsReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageNo        uint64                 `protobuf:"varint,1,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
	PageSize      uint64                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	CreatedAt     []int64                `protobuf:"varint,3,rep,packed,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     []int64                `protobuf:"varint,4,rep,packed,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListReq) Reset() {
	*x = ListReq{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReq) ProtoMessage() {}

func (x *ListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReq.ProtoReflect.Descriptor instead.
func (*ListReq) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{3}
}

func (x *ListReq) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *ListReq) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListReq) GetCreatedAt() []int64 {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ListReq) GetUpdatedAt() []int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type BaseRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Msg           string                 `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaseRes) Reset() {
	*x = BaseRes{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseRes) ProtoMessage() {}

func (x *BaseRes) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseRes.ProtoReflect.Descriptor instead.
func (*BaseRes) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{4}
}

func (x *BaseRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type BaseIDRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaseIDRes) Reset() {
	*x = BaseIDRes{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseIDRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseIDRes) ProtoMessage() {}

func (x *BaseIDRes) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseIDRes.ProtoReflect.Descriptor instead.
func (*BaseIDRes) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{5}
}

func (x *BaseIDRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BaseIDRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type CasbinBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoleCode      string                 `protobuf:"bytes,1,opt,name=role_code,json=roleCode,proto3" json:"role_code,omitempty"`
	Method        string                 `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Path          string                 `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CasbinBody) Reset() {
	*x = CasbinBody{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CasbinBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CasbinBody) ProtoMessage() {}

func (x *CasbinBody) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CasbinBody.ProtoReflect.Descriptor instead.
func (*CasbinBody) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{6}
}

func (x *CasbinBody) GetRoleCode() string {
	if x != nil {
		return x.RoleCode
	}
	return ""
}

func (x *CasbinBody) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CasbinBody) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type CasbinReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoleCode      []string               `protobuf:"bytes,1,rep,name=role_code,json=roleCode,proto3" json:"role_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CasbinReq) Reset() {
	*x = CasbinReq{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CasbinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CasbinReq) ProtoMessage() {}

func (x *CasbinReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CasbinReq.ProtoReflect.Descriptor instead.
func (*CasbinReq) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{7}
}

func (x *CasbinReq) GetRoleCode() []string {
	if x != nil {
		return x.RoleCode
	}
	return nil
}

type CasbinRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*CasbinBody          `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CasbinRes) Reset() {
	*x = CasbinRes{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CasbinRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CasbinRes) ProtoMessage() {}

func (x *CasbinRes) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CasbinRes.ProtoReflect.Descriptor instead.
func (*CasbinRes) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{8}
}

func (x *CasbinRes) GetList() []*CasbinBody {
	if x != nil {
		return x.List
	}
	return nil
}

type RoleFromRoleReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoleIds       []string               `protobuf:"bytes,1,rep,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoleFromRoleReq) Reset() {
	*x = RoleFromRoleReq{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleFromRoleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleFromRoleReq) ProtoMessage() {}

func (x *RoleFromRoleReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleFromRoleReq.ProtoReflect.Descriptor instead.
func (*RoleFromRoleReq) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{9}
}

func (x *RoleFromRoleReq) GetRoleIds() []string {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

type RoleFromRoleRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoleCode      []string               `protobuf:"bytes,1,rep,name=role_code,json=roleCode,proto3" json:"role_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoleFromRoleRes) Reset() {
	*x = RoleFromRoleRes{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleFromRoleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleFromRoleRes) ProtoMessage() {}

func (x *RoleFromRoleRes) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleFromRoleRes.ProtoReflect.Descriptor instead.
func (*RoleFromRoleRes) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{10}
}

func (x *RoleFromRoleRes) GetRoleCode() []string {
	if x != nil {
		return x.RoleCode
	}
	return nil
}

type RoleFromMenuReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MenuIds       []string               `protobuf:"bytes,1,rep,name=menu_ids,json=menuIds,proto3" json:"menu_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoleFromMenuReq) Reset() {
	*x = RoleFromMenuReq{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleFromMenuReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleFromMenuReq) ProtoMessage() {}

func (x *RoleFromMenuReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleFromMenuReq.ProtoReflect.Descriptor instead.
func (*RoleFromMenuReq) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{11}
}

func (x *RoleFromMenuReq) GetMenuIds() []string {
	if x != nil {
		return x.MenuIds
	}
	return nil
}

type RoleFromMenuRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoleCode      []string               `protobuf:"bytes,1,rep,name=role_code,json=roleCode,proto3" json:"role_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoleFromMenuRes) Reset() {
	*x = RoleFromMenuRes{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleFromMenuRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleFromMenuRes) ProtoMessage() {}

func (x *RoleFromMenuRes) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleFromMenuRes.ProtoReflect.Descriptor instead.
func (*RoleFromMenuRes) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{12}
}

func (x *RoleFromMenuRes) GetRoleCode() []string {
	if x != nil {
		return x.RoleCode
	}
	return nil
}

type DepartmentBody struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt      *int64                 `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt      *int64                 `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Sort           *uint32                `protobuf:"varint,4,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	DepartmentName *string                `protobuf:"bytes,5,opt,name=department_name,json=departmentName,proto3,oneof" json:"department_name,omitempty"`
	Remark         *string                `protobuf:"bytes,7,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	ParentId       *string                `protobuf:"bytes,8,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	Path           *string                `protobuf:"bytes,9,opt,name=path,proto3,oneof" json:"path,omitempty"`
	Level          *uint32                `protobuf:"varint,10,opt,name=level,proto3,oneof" json:"level,omitempty"`
	Children       []*DepartmentBody      `protobuf:"bytes,11,rep,name=children,proto3" json:"children,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DepartmentBody) Reset() {
	*x = DepartmentBody{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepartmentBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentBody) ProtoMessage() {}

func (x *DepartmentBody) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentBody.ProtoReflect.Descriptor instead.
func (*DepartmentBody) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{13}
}

func (x *DepartmentBody) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *DepartmentBody) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *DepartmentBody) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *DepartmentBody) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *DepartmentBody) GetDepartmentName() string {
	if x != nil && x.DepartmentName != nil {
		return *x.DepartmentName
	}
	return ""
}

func (x *DepartmentBody) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *DepartmentBody) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *DepartmentBody) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *DepartmentBody) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *DepartmentBody) GetChildren() []*DepartmentBody {
	if x != nil {
		return x.Children
	}
	return nil
}

type DepartmentListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageNo        *uint64                `protobuf:"varint,1,opt,name=page_no,json=pageNo,proto3,oneof" json:"page_no,omitempty"`
	PageSize      *uint64                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepartmentListReq) Reset() {
	*x = DepartmentListReq{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepartmentListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentListReq) ProtoMessage() {}

func (x *DepartmentListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentListReq.ProtoReflect.Descriptor instead.
func (*DepartmentListReq) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{14}
}

func (x *DepartmentListReq) GetPageNo() uint64 {
	if x != nil && x.PageNo != nil {
		return *x.PageNo
	}
	return 0
}

func (x *DepartmentListReq) GetPageSize() uint64 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

type DepartmentListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageNo        uint64                 `protobuf:"varint,1,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
	PageSize      uint64                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total         uint64                 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	More          bool                   `protobuf:"varint,4,opt,name=more,proto3" json:"more,omitempty"`
	List          []*DepartmentBody      `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DepartmentListRes) Reset() {
	*x = DepartmentListRes{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DepartmentListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepartmentListRes) ProtoMessage() {}

func (x *DepartmentListRes) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepartmentListRes.ProtoReflect.Descriptor instead.
func (*DepartmentListRes) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{15}
}

func (x *DepartmentListRes) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *DepartmentListRes) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DepartmentListRes) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DepartmentListRes) GetMore() bool {
	if x != nil {
		return x.More
	}
	return false
}

func (x *DepartmentListRes) GetList() []*DepartmentBody {
	if x != nil {
		return x.List
	}
	return nil
}

type ResourceBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Method        *string                `protobuf:"bytes,4,opt,name=method,proto3,oneof" json:"method,omitempty"`
	Path          *string                `protobuf:"bytes,5,opt,name=path,proto3,oneof" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceBody) Reset() {
	*x = ResourceBody{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceBody) ProtoMessage() {}

func (x *ResourceBody) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceBody.ProtoReflect.Descriptor instead.
func (*ResourceBody) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{16}
}

func (x *ResourceBody) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ResourceBody) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *ResourceBody) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

type MenuBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt     *int64                 `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt     *int64                 `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Status        *uint32                `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Sort          *uint32                `protobuf:"varint,5,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	Title         *string                `protobuf:"bytes,6,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Icon          *string                `protobuf:"bytes,7,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
	Code          *string                `protobuf:"bytes,8,opt,name=code,proto3,oneof" json:"code,omitempty"`
	CodePath      *string                `protobuf:"bytes,9,opt,name=code_path,json=codePath,proto3,oneof" json:"code_path,omitempty"`
	ParentId      *string                `protobuf:"bytes,10,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	MenuType      *string                `protobuf:"bytes,11,opt,name=menu_type,json=menuType,proto3,oneof" json:"menu_type,omitempty"`
	MenuPath      *string                `protobuf:"bytes,12,opt,name=menu_path,json=menuPath,proto3,oneof" json:"menu_path,omitempty"`
	Level         *uint32                `protobuf:"varint,13,opt,name=level,proto3,oneof" json:"level,omitempty"`
	Properties    *string                `protobuf:"bytes,14,opt,name=properties,proto3,oneof" json:"properties,omitempty"`
	Resources     []*ResourceBody        `protobuf:"bytes,15,rep,name=resources,proto3" json:"resources,omitempty"`
	Children      []*MenuBody            `protobuf:"bytes,16,rep,name=children,proto3" json:"children,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MenuBody) Reset() {
	*x = MenuBody{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuBody) ProtoMessage() {}

func (x *MenuBody) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuBody.ProtoReflect.Descriptor instead.
func (*MenuBody) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{17}
}

func (x *MenuBody) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *MenuBody) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *MenuBody) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *MenuBody) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *MenuBody) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *MenuBody) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *MenuBody) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *MenuBody) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *MenuBody) GetCodePath() string {
	if x != nil && x.CodePath != nil {
		return *x.CodePath
	}
	return ""
}

func (x *MenuBody) GetParentId() string {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return ""
}

func (x *MenuBody) GetMenuType() string {
	if x != nil && x.MenuType != nil {
		return *x.MenuType
	}
	return ""
}

func (x *MenuBody) GetMenuPath() string {
	if x != nil && x.MenuPath != nil {
		return *x.MenuPath
	}
	return ""
}

func (x *MenuBody) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *MenuBody) GetProperties() string {
	if x != nil && x.Properties != nil {
		return *x.Properties
	}
	return ""
}

func (x *MenuBody) GetResources() []*ResourceBody {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MenuBody) GetChildren() []*MenuBody {
	if x != nil {
		return x.Children
	}
	return nil
}

type MenuListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MenuListReq) Reset() {
	*x = MenuListReq{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuListReq) ProtoMessage() {}

func (x *MenuListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuListReq.ProtoReflect.Descriptor instead.
func (*MenuListReq) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{18}
}

type MenuListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*MenuBody            `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MenuListRes) Reset() {
	*x = MenuListRes{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuListRes) ProtoMessage() {}

func (x *MenuListRes) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuListRes.ProtoReflect.Descriptor instead.
func (*MenuListRes) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{19}
}

func (x *MenuListRes) GetList() []*MenuBody {
	if x != nil {
		return x.List
	}
	return nil
}

type PositionBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt     *int64                 `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt     *int64                 `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Sort          *uint32                `protobuf:"varint,4,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	PositionName  *string                `protobuf:"bytes,5,opt,name=position_name,json=positionName,proto3,oneof" json:"position_name,omitempty"`
	Code          *string                `protobuf:"bytes,6,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Remark        *string                `protobuf:"bytes,7,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PositionBody) Reset() {
	*x = PositionBody{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionBody) ProtoMessage() {}

func (x *PositionBody) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionBody.ProtoReflect.Descriptor instead.
func (*PositionBody) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{20}
}

func (x *PositionBody) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *PositionBody) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *PositionBody) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *PositionBody) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *PositionBody) GetPositionName() string {
	if x != nil && x.PositionName != nil {
		return *x.PositionName
	}
	return ""
}

func (x *PositionBody) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *PositionBody) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type PositionListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageNo        *uint64                `protobuf:"varint,1,opt,name=page_no,json=pageNo,proto3,oneof" json:"page_no,omitempty"`
	PageSize      *uint64                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	CreatedAt     []int64                `protobuf:"varint,3,rep,packed,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     []int64                `protobuf:"varint,4,rep,packed,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	PositionName  *string                `protobuf:"bytes,5,opt,name=position_name,json=positionName,proto3,oneof" json:"position_name,omitempty"`
	Code          *string                `protobuf:"bytes,6,opt,name=code,proto3,oneof" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PositionListReq) Reset() {
	*x = PositionListReq{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionListReq) ProtoMessage() {}

func (x *PositionListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionListReq.ProtoReflect.Descriptor instead.
func (*PositionListReq) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{21}
}

func (x *PositionListReq) GetPageNo() uint64 {
	if x != nil && x.PageNo != nil {
		return *x.PageNo
	}
	return 0
}

func (x *PositionListReq) GetPageSize() uint64 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *PositionListReq) GetCreatedAt() []int64 {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PositionListReq) GetUpdatedAt() []int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PositionListReq) GetPositionName() string {
	if x != nil && x.PositionName != nil {
		return *x.PositionName
	}
	return ""
}

func (x *PositionListReq) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

type PositionListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageNo        uint64                 `protobuf:"varint,1,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
	PageSize      uint64                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total         uint64                 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	More          bool                   `protobuf:"varint,4,opt,name=more,proto3" json:"more,omitempty"`
	List          []*PositionBody        `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PositionListRes) Reset() {
	*x = PositionListRes{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionListRes) ProtoMessage() {}

func (x *PositionListRes) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionListRes.ProtoReflect.Descriptor instead.
func (*PositionListRes) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{22}
}

func (x *PositionListRes) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *PositionListRes) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PositionListRes) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PositionListRes) GetMore() bool {
	if x != nil {
		return x.More
	}
	return false
}

func (x *PositionListRes) GetList() []*PositionBody {
	if x != nil {
		return x.List
	}
	return nil
}

type RoleBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt     *int64                 `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt     *int64                 `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Sort          *uint32                `protobuf:"varint,4,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	RoleName      *string                `protobuf:"bytes,5,opt,name=role_name,json=roleName,proto3,oneof" json:"role_name,omitempty"`
	Code          *string                `protobuf:"bytes,6,opt,name=code,proto3,oneof" json:"code,omitempty"`
	Remark        *string                `protobuf:"bytes,7,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Menus         []*MenuBody            `protobuf:"bytes,8,rep,name=menus,proto3" json:"menus,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoleBody) Reset() {
	*x = RoleBody{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleBody) ProtoMessage() {}

func (x *RoleBody) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleBody.ProtoReflect.Descriptor instead.
func (*RoleBody) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{23}
}

func (x *RoleBody) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RoleBody) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *RoleBody) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *RoleBody) GetSort() uint32 {
	if x != nil && x.Sort != nil {
		return *x.Sort
	}
	return 0
}

func (x *RoleBody) GetRoleName() string {
	if x != nil && x.RoleName != nil {
		return *x.RoleName
	}
	return ""
}

func (x *RoleBody) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *RoleBody) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *RoleBody) GetMenus() []*MenuBody {
	if x != nil {
		return x.Menus
	}
	return nil
}

type RoleListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageNo        *uint64                `protobuf:"varint,1,opt,name=page_no,json=pageNo,proto3,oneof" json:"page_no,omitempty"`
	PageSize      *uint64                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	CreatedAt     []int64                `protobuf:"varint,3,rep,packed,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     []int64                `protobuf:"varint,4,rep,packed,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	RoleName      *string                `protobuf:"bytes,5,opt,name=role_name,json=roleName,proto3,oneof" json:"role_name,omitempty"`
	Code          *string                `protobuf:"bytes,6,opt,name=code,proto3,oneof" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoleListReq) Reset() {
	*x = RoleListReq{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleListReq) ProtoMessage() {}

func (x *RoleListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleListReq.ProtoReflect.Descriptor instead.
func (*RoleListReq) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{24}
}

func (x *RoleListReq) GetPageNo() uint64 {
	if x != nil && x.PageNo != nil {
		return *x.PageNo
	}
	return 0
}

func (x *RoleListReq) GetPageSize() uint64 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *RoleListReq) GetCreatedAt() []int64 {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RoleListReq) GetUpdatedAt() []int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *RoleListReq) GetRoleName() string {
	if x != nil && x.RoleName != nil {
		return *x.RoleName
	}
	return ""
}

func (x *RoleListReq) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

type RoleListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageNo        uint64                 `protobuf:"varint,1,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
	PageSize      uint64                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total         uint64                 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	More          bool                   `protobuf:"varint,4,opt,name=more,proto3" json:"more,omitempty"`
	List          []*RoleBody            `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoleListRes) Reset() {
	*x = RoleListRes{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleListRes) ProtoMessage() {}

func (x *RoleListRes) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleListRes.ProtoReflect.Descriptor instead.
func (*RoleListRes) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{25}
}

func (x *RoleListRes) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *RoleListRes) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RoleListRes) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RoleListRes) GetMore() bool {
	if x != nil {
		return x.More
	}
	return false
}

func (x *RoleListRes) GetList() []*RoleBody {
	if x != nil {
		return x.List
	}
	return nil
}

type UserBody struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	CreatedAt     *int64                 `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3,oneof" json:"created_at,omitempty"`
	UpdatedAt     *int64                 `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3,oneof" json:"updated_at,omitempty"`
	Status        *uint32                `protobuf:"varint,4,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Password      *string                `protobuf:"bytes,6,opt,name=password,proto3,oneof" json:"password,omitempty"`
	Email         *string                `protobuf:"bytes,7,opt,name=email,proto3,oneof" json:"email,omitempty"`
	Name          *string                `protobuf:"bytes,8,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Nickname      *string                `protobuf:"bytes,9,opt,name=nickname,proto3,oneof" json:"nickname,omitempty"`
	Phone         *string                `protobuf:"bytes,10,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
	Avatar        *string                `protobuf:"bytes,11,opt,name=avatar,proto3,oneof" json:"avatar,omitempty"`
	Remark        *string                `protobuf:"bytes,12,opt,name=remark,proto3,oneof" json:"remark,omitempty"`
	Department    *DepartmentBody        `protobuf:"bytes,13,opt,name=department,proto3,oneof" json:"department,omitempty"`
	Positions     []*PositionBody        `protobuf:"bytes,14,rep,name=positions,proto3" json:"positions,omitempty"`
	Roles         []*RoleBody            `protobuf:"bytes,15,rep,name=roles,proto3" json:"roles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserBody) Reset() {
	*x = UserBody{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBody) ProtoMessage() {}

func (x *UserBody) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBody.ProtoReflect.Descriptor instead.
func (*UserBody) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{26}
}

func (x *UserBody) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *UserBody) GetCreatedAt() int64 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *UserBody) GetUpdatedAt() int64 {
	if x != nil && x.UpdatedAt != nil {
		return *x.UpdatedAt
	}
	return 0
}

func (x *UserBody) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *UserBody) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *UserBody) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *UserBody) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UserBody) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *UserBody) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *UserBody) GetAvatar() string {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return ""
}

func (x *UserBody) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *UserBody) GetDepartment() *DepartmentBody {
	if x != nil {
		return x.Department
	}
	return nil
}

func (x *UserBody) GetPositions() []*PositionBody {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *UserBody) GetRoles() []*RoleBody {
	if x != nil {
		return x.Roles
	}
	return nil
}

type UserListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageNo        *uint64                `protobuf:"varint,1,opt,name=page_no,json=pageNo,proto3,oneof" json:"page_no,omitempty"`
	PageSize      *uint64                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	CreatedAt     []int64                `protobuf:"varint,3,rep,packed,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     []int64                `protobuf:"varint,4,rep,packed,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Status        *uint32                `protobuf:"varint,5,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Email         *string                `protobuf:"bytes,6,opt,name=email,proto3,oneof" json:"email,omitempty"`
	Name          *string                `protobuf:"bytes,7,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Nickname      *string                `protobuf:"bytes,8,opt,name=nickname,proto3,oneof" json:"nickname,omitempty"`
	Phone         *string                `protobuf:"bytes,9,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
	DepartmentIds []string               `protobuf:"bytes,10,rep,name=department_ids,json=departmentIds,proto3" json:"department_ids,omitempty"`
	PositionIds   []string               `protobuf:"bytes,11,rep,name=position_ids,json=positionIds,proto3" json:"position_ids,omitempty"`
	RoleIds       []string               `protobuf:"bytes,12,rep,name=role_ids,json=roleIds,proto3" json:"role_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserListReq) Reset() {
	*x = UserListReq{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListReq) ProtoMessage() {}

func (x *UserListReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListReq.ProtoReflect.Descriptor instead.
func (*UserListReq) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{27}
}

func (x *UserListReq) GetPageNo() uint64 {
	if x != nil && x.PageNo != nil {
		return *x.PageNo
	}
	return 0
}

func (x *UserListReq) GetPageSize() uint64 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *UserListReq) GetCreatedAt() []int64 {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserListReq) GetUpdatedAt() []int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UserListReq) GetStatus() uint32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *UserListReq) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *UserListReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UserListReq) GetNickname() string {
	if x != nil && x.Nickname != nil {
		return *x.Nickname
	}
	return ""
}

func (x *UserListReq) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *UserListReq) GetDepartmentIds() []string {
	if x != nil {
		return x.DepartmentIds
	}
	return nil
}

func (x *UserListReq) GetPositionIds() []string {
	if x != nil {
		return x.PositionIds
	}
	return nil
}

func (x *UserListReq) GetRoleIds() []string {
	if x != nil {
		return x.RoleIds
	}
	return nil
}

type UserListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageNo        uint64                 `protobuf:"varint,1,opt,name=page_no,json=pageNo,proto3" json:"page_no,omitempty"`
	PageSize      uint64                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Total         uint64                 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	More          bool                   `protobuf:"varint,4,opt,name=more,proto3" json:"more,omitempty"`
	List          []*UserBody            `protobuf:"bytes,5,rep,name=list,proto3" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserListRes) Reset() {
	*x = UserListRes{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserListRes) ProtoMessage() {}

func (x *UserListRes) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserListRes.ProtoReflect.Descriptor instead.
func (*UserListRes) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{28}
}

func (x *UserListRes) GetPageNo() uint64 {
	if x != nil {
		return x.PageNo
	}
	return 0
}

func (x *UserListRes) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *UserListRes) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UserListRes) GetMore() bool {
	if x != nil {
		return x.More
	}
	return false
}

func (x *UserListRes) GetList() []*UserBody {
	if x != nil {
		return x.List
	}
	return nil
}

type EmailReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Email         string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmailReq) Reset() {
	*x = EmailReq{}
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailReq) ProtoMessage() {}

func (x *EmailReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_admin_system_admin_system_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailReq.ProtoReflect.Descriptor instead.
func (*EmailReq) Descriptor() ([]byte, []int) {
	return file_rpc_admin_system_admin_system_proto_rawDescGZIP(), []int{29}
}

func (x *EmailReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

var File_rpc_admin_system_admin_system_proto protoreflect.FileDescriptor

var file_rpc_admin_system_admin_system_proto_rawDesc = string([]byte{
	0x0a, 0x23, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x17, 0x0a, 0x05,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x06, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0x7d, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x1b, 0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x2d, 0x0a,
	0x09, 0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x55, 0x0a, 0x0a,
	0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x22, 0x28, 0x0a, 0x09, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x39, 0x0a,
	0x09, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x0f, 0x52, 0x6f, 0x6c, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x0f, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f,
	0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2c, 0x0a, 0x0f, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x6e,
	0x75, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x6e,
	0x75, 0x49, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x0f, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xcf, 0x03, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x08, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x38,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x6d, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x74, 0x0a,
	0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x22, 0xc6, 0x05, 0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x6d, 0x65, 0x6e, 0x75, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x08, 0x6d, 0x65, 0x6e,
	0x75, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63,
	0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x65, 0x6e, 0x75,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x0d, 0x0a, 0x0b,
	0x4d, 0x65, 0x6e, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x39, 0x0a, 0x0b, 0x4d,
	0x65, 0x6e, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb8, 0x02, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x22, 0x87, 0x02, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x0f,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0xd6, 0x02, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x05, 0x6d, 0x65,
	0x6e, 0x75, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xf7, 0x01, 0x0a, 0x0b, 0x52, 0x6f, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x72, 0x6f, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x6f,
	0x72, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x86,
	0x05, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x41, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x48, 0x0b, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xcc, 0x03, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65,
	0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x6f, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x6d, 0x6f, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x20, 0x0a, 0x08, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x32, 0x43, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x42, 0x12, 0x13, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x32, 0xf8, 0x01, 0x0a, 0x0d, 0x43, 0x61,
	0x73, 0x62, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x42, 0x79, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x43, 0x61, 0x73, 0x62, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x42,
	0x79, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x6e,
	0x75, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x65, 0x6e, 0x75,
	0x52, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x6c, 0x65,
	0x42, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x32, 0x81, 0x03, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x17, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x12,
	0x42, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x53, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x44, 0x65, 0x70, 0x61,
	0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x32, 0xbf, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x6e,
	0x75, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x17,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75,
	0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x4d, 0x65, 0x6e, 0x75, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x13, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d,
	0x65, 0x6e, 0x75, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x4d, 0x65, 0x6e, 0x75, 0x12, 0x19, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x19, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4d,
	0x65, 0x6e, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x32, 0xeb, 0x02, 0x0a, 0x0f, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45,
	0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x17, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f,
	0x64, 0x79, 0x1a, 0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x67, 0x65, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x4d, 0x0a, 0x0d, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x32, 0xbf, 0x02, 0x0a, 0x0b, 0x52, 0x6f, 0x6c,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x17,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x13, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x19, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x32, 0x81, 0x03, 0x0a, 0x0b, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79,
	0x1a, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x15, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x12, 0x36, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x19, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0e,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x10,
	0x5a, 0x0e, 0x2e, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_rpc_admin_system_admin_system_proto_rawDescOnce sync.Once
	file_rpc_admin_system_admin_system_proto_rawDescData []byte
)

func file_rpc_admin_system_admin_system_proto_rawDescGZIP() []byte {
	file_rpc_admin_system_admin_system_proto_rawDescOnce.Do(func() {
		file_rpc_admin_system_admin_system_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rpc_admin_system_admin_system_proto_rawDesc), len(file_rpc_admin_system_admin_system_proto_rawDesc)))
	})
	return file_rpc_admin_system_admin_system_proto_rawDescData
}

var file_rpc_admin_system_admin_system_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_rpc_admin_system_admin_system_proto_goTypes = []any{
	(*Empty)(nil),             // 0: admin_system.Empty
	(*IDReq)(nil),             // 1: admin_system.IDReq
	(*IDsReq)(nil),            // 2: admin_system.IDsReq
	(*ListReq)(nil),           // 3: admin_system.ListReq
	(*BaseRes)(nil),           // 4: admin_system.BaseRes
	(*BaseIDRes)(nil),         // 5: admin_system.BaseIDRes
	(*CasbinBody)(nil),        // 6: admin_system.CasbinBody
	(*CasbinReq)(nil),         // 7: admin_system.CasbinReq
	(*CasbinRes)(nil),         // 8: admin_system.CasbinRes
	(*RoleFromRoleReq)(nil),   // 9: admin_system.RoleFromRoleReq
	(*RoleFromRoleRes)(nil),   // 10: admin_system.RoleFromRoleRes
	(*RoleFromMenuReq)(nil),   // 11: admin_system.RoleFromMenuReq
	(*RoleFromMenuRes)(nil),   // 12: admin_system.RoleFromMenuRes
	(*DepartmentBody)(nil),    // 13: admin_system.DepartmentBody
	(*DepartmentListReq)(nil), // 14: admin_system.DepartmentListReq
	(*DepartmentListRes)(nil), // 15: admin_system.DepartmentListRes
	(*ResourceBody)(nil),      // 16: admin_system.ResourceBody
	(*MenuBody)(nil),          // 17: admin_system.MenuBody
	(*MenuListReq)(nil),       // 18: admin_system.MenuListReq
	(*MenuListRes)(nil),       // 19: admin_system.MenuListRes
	(*PositionBody)(nil),      // 20: admin_system.PositionBody
	(*PositionListReq)(nil),   // 21: admin_system.PositionListReq
	(*PositionListRes)(nil),   // 22: admin_system.PositionListRes
	(*RoleBody)(nil),          // 23: admin_system.RoleBody
	(*RoleListReq)(nil),       // 24: admin_system.RoleListReq
	(*RoleListRes)(nil),       // 25: admin_system.RoleListRes
	(*UserBody)(nil),          // 26: admin_system.UserBody
	(*UserListReq)(nil),       // 27: admin_system.UserListReq
	(*UserListRes)(nil),       // 28: admin_system.UserListRes
	(*EmailReq)(nil),          // 29: admin_system.EmailReq
}
var file_rpc_admin_system_admin_system_proto_depIdxs = []int32{
	6,  // 0: admin_system.CasbinRes.list:type_name -> admin_system.CasbinBody
	13, // 1: admin_system.DepartmentBody.children:type_name -> admin_system.DepartmentBody
	13, // 2: admin_system.DepartmentListRes.list:type_name -> admin_system.DepartmentBody
	16, // 3: admin_system.MenuBody.resources:type_name -> admin_system.ResourceBody
	17, // 4: admin_system.MenuBody.children:type_name -> admin_system.MenuBody
	17, // 5: admin_system.MenuListRes.list:type_name -> admin_system.MenuBody
	20, // 6: admin_system.PositionListRes.list:type_name -> admin_system.PositionBody
	17, // 7: admin_system.RoleBody.menus:type_name -> admin_system.MenuBody
	23, // 8: admin_system.RoleListRes.list:type_name -> admin_system.RoleBody
	13, // 9: admin_system.UserBody.department:type_name -> admin_system.DepartmentBody
	20, // 10: admin_system.UserBody.positions:type_name -> admin_system.PositionBody
	23, // 11: admin_system.UserBody.roles:type_name -> admin_system.RoleBody
	26, // 12: admin_system.UserListRes.list:type_name -> admin_system.UserBody
	0,  // 13: admin_system.BaseService.InitDB:input_type -> admin_system.Empty
	7,  // 14: admin_system.CasbinService.queryCasbinByRole:input_type -> admin_system.CasbinReq
	11, // 15: admin_system.CasbinService.queryRoleByMenu:input_type -> admin_system.RoleFromMenuReq
	9,  // 16: admin_system.CasbinService.queryRoleByRole:input_type -> admin_system.RoleFromRoleReq
	13, // 17: admin_system.DepartmentService.createDepartment:input_type -> admin_system.DepartmentBody
	2,  // 18: admin_system.DepartmentService.deleteDepartment:input_type -> admin_system.IDsReq
	13, // 19: admin_system.DepartmentService.updateDepartment:input_type -> admin_system.DepartmentBody
	1,  // 20: admin_system.DepartmentService.getDepartment:input_type -> admin_system.IDReq
	14, // 21: admin_system.DepartmentService.queryDepartment:input_type -> admin_system.DepartmentListReq
	17, // 22: admin_system.MenuService.createMenu:input_type -> admin_system.MenuBody
	2,  // 23: admin_system.MenuService.deleteMenu:input_type -> admin_system.IDsReq
	17, // 24: admin_system.MenuService.updateMenu:input_type -> admin_system.MenuBody
	1,  // 25: admin_system.MenuService.getMenu:input_type -> admin_system.IDReq
	18, // 26: admin_system.MenuService.queryMenu:input_type -> admin_system.MenuListReq
	20, // 27: admin_system.PositionService.createPosition:input_type -> admin_system.PositionBody
	2,  // 28: admin_system.PositionService.deletePosition:input_type -> admin_system.IDsReq
	20, // 29: admin_system.PositionService.updatePosition:input_type -> admin_system.PositionBody
	1,  // 30: admin_system.PositionService.getPosition:input_type -> admin_system.IDReq
	21, // 31: admin_system.PositionService.queryPosition:input_type -> admin_system.PositionListReq
	23, // 32: admin_system.RoleService.createRole:input_type -> admin_system.RoleBody
	2,  // 33: admin_system.RoleService.deleteRole:input_type -> admin_system.IDsReq
	23, // 34: admin_system.RoleService.updateRole:input_type -> admin_system.RoleBody
	1,  // 35: admin_system.RoleService.getRole:input_type -> admin_system.IDReq
	24, // 36: admin_system.RoleService.queryRole:input_type -> admin_system.RoleListReq
	26, // 37: admin_system.UserService.createUser:input_type -> admin_system.UserBody
	2,  // 38: admin_system.UserService.deleteUser:input_type -> admin_system.IDsReq
	26, // 39: admin_system.UserService.updateUser:input_type -> admin_system.UserBody
	1,  // 40: admin_system.UserService.getUser:input_type -> admin_system.IDReq
	27, // 41: admin_system.UserService.queryUser:input_type -> admin_system.UserListReq
	29, // 42: admin_system.UserService.getUserByEmail:input_type -> admin_system.EmailReq
	4,  // 43: admin_system.BaseService.InitDB:output_type -> admin_system.BaseRes
	8,  // 44: admin_system.CasbinService.queryCasbinByRole:output_type -> admin_system.CasbinRes
	12, // 45: admin_system.CasbinService.queryRoleByMenu:output_type -> admin_system.RoleFromMenuRes
	10, // 46: admin_system.CasbinService.queryRoleByRole:output_type -> admin_system.RoleFromRoleRes
	5,  // 47: admin_system.DepartmentService.createDepartment:output_type -> admin_system.BaseIDRes
	4,  // 48: admin_system.DepartmentService.deleteDepartment:output_type -> admin_system.BaseRes
	4,  // 49: admin_system.DepartmentService.updateDepartment:output_type -> admin_system.BaseRes
	13, // 50: admin_system.DepartmentService.getDepartment:output_type -> admin_system.DepartmentBody
	15, // 51: admin_system.DepartmentService.queryDepartment:output_type -> admin_system.DepartmentListRes
	5,  // 52: admin_system.MenuService.createMenu:output_type -> admin_system.BaseIDRes
	4,  // 53: admin_system.MenuService.deleteMenu:output_type -> admin_system.BaseRes
	4,  // 54: admin_system.MenuService.updateMenu:output_type -> admin_system.BaseRes
	17, // 55: admin_system.MenuService.getMenu:output_type -> admin_system.MenuBody
	19, // 56: admin_system.MenuService.queryMenu:output_type -> admin_system.MenuListRes
	5,  // 57: admin_system.PositionService.createPosition:output_type -> admin_system.BaseIDRes
	4,  // 58: admin_system.PositionService.deletePosition:output_type -> admin_system.BaseRes
	4,  // 59: admin_system.PositionService.updatePosition:output_type -> admin_system.BaseRes
	20, // 60: admin_system.PositionService.getPosition:output_type -> admin_system.PositionBody
	22, // 61: admin_system.PositionService.queryPosition:output_type -> admin_system.PositionListRes
	5,  // 62: admin_system.RoleService.createRole:output_type -> admin_system.BaseIDRes
	4,  // 63: admin_system.RoleService.deleteRole:output_type -> admin_system.BaseRes
	4,  // 64: admin_system.RoleService.updateRole:output_type -> admin_system.BaseRes
	23, // 65: admin_system.RoleService.getRole:output_type -> admin_system.RoleBody
	25, // 66: admin_system.RoleService.queryRole:output_type -> admin_system.RoleListRes
	5,  // 67: admin_system.UserService.createUser:output_type -> admin_system.BaseIDRes
	4,  // 68: admin_system.UserService.deleteUser:output_type -> admin_system.BaseRes
	4,  // 69: admin_system.UserService.updateUser:output_type -> admin_system.BaseRes
	26, // 70: admin_system.UserService.getUser:output_type -> admin_system.UserBody
	28, // 71: admin_system.UserService.queryUser:output_type -> admin_system.UserListRes
	26, // 72: admin_system.UserService.getUserByEmail:output_type -> admin_system.UserBody
	43, // [43:73] is the sub-list for method output_type
	13, // [13:43] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_rpc_admin_system_admin_system_proto_init() }
func file_rpc_admin_system_admin_system_proto_init() {
	if File_rpc_admin_system_admin_system_proto != nil {
		return
	}
	file_rpc_admin_system_admin_system_proto_msgTypes[13].OneofWrappers = []any{}
	file_rpc_admin_system_admin_system_proto_msgTypes[14].OneofWrappers = []any{}
	file_rpc_admin_system_admin_system_proto_msgTypes[16].OneofWrappers = []any{}
	file_rpc_admin_system_admin_system_proto_msgTypes[17].OneofWrappers = []any{}
	file_rpc_admin_system_admin_system_proto_msgTypes[20].OneofWrappers = []any{}
	file_rpc_admin_system_admin_system_proto_msgTypes[21].OneofWrappers = []any{}
	file_rpc_admin_system_admin_system_proto_msgTypes[23].OneofWrappers = []any{}
	file_rpc_admin_system_admin_system_proto_msgTypes[24].OneofWrappers = []any{}
	file_rpc_admin_system_admin_system_proto_msgTypes[26].OneofWrappers = []any{}
	file_rpc_admin_system_admin_system_proto_msgTypes[27].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rpc_admin_system_admin_system_proto_rawDesc), len(file_rpc_admin_system_admin_system_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   7,
		},
		GoTypes:           file_rpc_admin_system_admin_system_proto_goTypes,
		DependencyIndexes: file_rpc_admin_system_admin_system_proto_depIdxs,
		MessageInfos:      file_rpc_admin_system_admin_system_proto_msgTypes,
	}.Build()
	File_rpc_admin_system_admin_system_proto = out.File
	file_rpc_admin_system_admin_system_proto_goTypes = nil
	file_rpc_admin_system_admin_system_proto_depIdxs = nil
}
