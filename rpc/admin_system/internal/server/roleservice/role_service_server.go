// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: admin_system.proto

package server

import (
	"context"

	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/admin_system"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/internal/logic/roleservice"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/internal/svc"
)

type RoleServiceServer struct {
	svcCtx *svc.ServiceContext
	admin_system.UnimplementedRoleServiceServer
}

func NewRoleServiceServer(svcCtx *svc.ServiceContext) *RoleServiceServer {
	return &RoleServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *RoleServiceServer) CreateRole(ctx context.Context, in *admin_system.RoleBody) (*admin_system.BaseIDRes, error) {
	l := roleservicelogic.NewCreateRoleLogic(ctx, s.svcCtx)
	return l.CreateRole(in)
}

func (s *RoleServiceServer) DeleteRole(ctx context.Context, in *admin_system.IDsReq) (*admin_system.BaseRes, error) {
	l := roleservicelogic.NewDeleteRoleLogic(ctx, s.svcCtx)
	return l.DeleteRole(in)
}

func (s *RoleServiceServer) UpdateRole(ctx context.Context, in *admin_system.RoleBody) (*admin_system.BaseRes, error) {
	l := roleservicelogic.NewUpdateRoleLogic(ctx, s.svcCtx)
	return l.UpdateRole(in)
}

func (s *RoleServiceServer) GetRole(ctx context.Context, in *admin_system.IDReq) (*admin_system.RoleBody, error) {
	l := roleservicelogic.NewGetRoleLogic(ctx, s.svcCtx)
	return l.GetRole(in)
}

func (s *RoleServiceServer) QueryRole(ctx context.Context, in *admin_system.RoleListReq) (*admin_system.RoleListRes, error) {
	l := roleservicelogic.NewQueryRoleLogic(ctx, s.svcCtx)
	return l.QueryRole(in)
}
