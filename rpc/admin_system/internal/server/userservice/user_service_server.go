// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: admin_system.proto

package server

import (
	"context"

	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/admin_system"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/internal/logic/userservice"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/internal/svc"
)

type UserServiceServer struct {
	svcCtx *svc.ServiceContext
	admin_system.UnimplementedUserServiceServer
}

func NewUserServiceServer(svcCtx *svc.ServiceContext) *UserServiceServer {
	return &UserServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServiceServer) CreateUser(ctx context.Context, in *admin_system.UserBody) (*admin_system.BaseIDRes, error) {
	l := userservicelogic.NewCreateUserLogic(ctx, s.svcCtx)
	return l.CreateUser(in)
}

func (s *UserServiceServer) DeleteUser(ctx context.Context, in *admin_system.IDsReq) (*admin_system.BaseRes, error) {
	l := userservicelogic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}

func (s *UserServiceServer) UpdateUser(ctx context.Context, in *admin_system.UserBody) (*admin_system.BaseRes, error) {
	l := userservicelogic.NewUpdateUserLogic(ctx, s.svcCtx)
	return l.UpdateUser(in)
}

func (s *UserServiceServer) GetUser(ctx context.Context, in *admin_system.IDReq) (*admin_system.UserBody, error) {
	l := userservicelogic.NewGetUserLogic(ctx, s.svcCtx)
	return l.GetUser(in)
}

func (s *UserServiceServer) QueryUser(ctx context.Context, in *admin_system.UserListReq) (*admin_system.UserListRes, error) {
	l := userservicelogic.NewQueryUserLogic(ctx, s.svcCtx)
	return l.QueryUser(in)
}

func (s *UserServiceServer) GetUserByEmail(ctx context.Context, in *admin_system.EmailReq) (*admin_system.UserBody, error) {
	l := userservicelogic.NewGetUserByEmailLogic(ctx, s.svcCtx)
	return l.GetUserByEmail(in)
}
