// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: admin_system.proto

package server

import (
	"context"

	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/admin_system"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/internal/logic/positionservice"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/internal/svc"
)

type PositionServiceServer struct {
	svcCtx *svc.ServiceContext
	admin_system.UnimplementedPositionServiceServer
}

func NewPositionServiceServer(svcCtx *svc.ServiceContext) *PositionServiceServer {
	return &PositionServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *PositionServiceServer) CreatePosition(ctx context.Context, in *admin_system.PositionBody) (*admin_system.BaseIDRes, error) {
	l := positionservicelogic.NewCreatePositionLogic(ctx, s.svcCtx)
	return l.CreatePosition(in)
}

func (s *PositionServiceServer) DeletePosition(ctx context.Context, in *admin_system.IDsReq) (*admin_system.BaseRes, error) {
	l := positionservicelogic.NewDeletePositionLogic(ctx, s.svcCtx)
	return l.DeletePosition(in)
}

func (s *PositionServiceServer) UpdatePosition(ctx context.Context, in *admin_system.PositionBody) (*admin_system.BaseRes, error) {
	l := positionservicelogic.NewUpdatePositionLogic(ctx, s.svcCtx)
	return l.UpdatePosition(in)
}

func (s *PositionServiceServer) GetPosition(ctx context.Context, in *admin_system.IDReq) (*admin_system.PositionBody, error) {
	l := positionservicelogic.NewGetPositionLogic(ctx, s.svcCtx)
	return l.GetPosition(in)
}

func (s *PositionServiceServer) QueryPosition(ctx context.Context, in *admin_system.PositionListReq) (*admin_system.PositionListRes, error) {
	l := positionservicelogic.NewQueryPositionLogic(ctx, s.svcCtx)
	return l.QueryPosition(in)
}
