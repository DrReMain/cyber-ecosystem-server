// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: admin_system.proto

package userservice

import (
	"context"

	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/admin_system"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseIDRes         = admin_system.BaseIDRes
	BaseRes           = admin_system.BaseRes
	CasbinBody        = admin_system.CasbinBody
	CasbinReq         = admin_system.CasbinReq
	CasbinRes         = admin_system.CasbinRes
	DepartmentBody    = admin_system.DepartmentBody
	DepartmentListReq = admin_system.DepartmentListReq
	DepartmentListRes = admin_system.DepartmentListRes
	EmailReq          = admin_system.EmailReq
	Empty             = admin_system.Empty
	IDReq             = admin_system.IDReq
	IDsReq            = admin_system.IDsReq
	ListReq           = admin_system.ListReq
	MenuBody          = admin_system.MenuBody
	MenuListReq       = admin_system.MenuListReq
	MenuListRes       = admin_system.MenuListRes
	PositionBody      = admin_system.PositionBody
	PositionListReq   = admin_system.PositionListReq
	PositionListRes   = admin_system.PositionListRes
	ResourceBody      = admin_system.ResourceBody
	RoleBody          = admin_system.RoleBody
	RoleFromMenuReq   = admin_system.RoleFromMenuReq
	RoleFromMenuRes   = admin_system.RoleFromMenuRes
	RoleFromRoleReq   = admin_system.RoleFromRoleReq
	RoleFromRoleRes   = admin_system.RoleFromRoleRes
	RoleListReq       = admin_system.RoleListReq
	RoleListRes       = admin_system.RoleListRes
	UserBody          = admin_system.UserBody
	UserListReq       = admin_system.UserListReq
	UserListRes       = admin_system.UserListRes

	UserService interface {
		CreateUser(ctx context.Context, in *UserBody, opts ...grpc.CallOption) (*BaseIDRes, error)
		DeleteUser(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseRes, error)
		UpdateUser(ctx context.Context, in *UserBody, opts ...grpc.CallOption) (*BaseRes, error)
		GetUser(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*UserBody, error)
		QueryUser(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListRes, error)
		GetUserByEmail(ctx context.Context, in *EmailReq, opts ...grpc.CallOption) (*UserBody, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) CreateUser(ctx context.Context, in *UserBody, opts ...grpc.CallOption) (*BaseIDRes, error) {
	client := admin_system.NewUserServiceClient(m.cli.Conn())
	return client.CreateUser(ctx, in, opts...)
}

func (m *defaultUserService) DeleteUser(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseRes, error) {
	client := admin_system.NewUserServiceClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

func (m *defaultUserService) UpdateUser(ctx context.Context, in *UserBody, opts ...grpc.CallOption) (*BaseRes, error) {
	client := admin_system.NewUserServiceClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultUserService) GetUser(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*UserBody, error) {
	client := admin_system.NewUserServiceClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

func (m *defaultUserService) QueryUser(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListRes, error) {
	client := admin_system.NewUserServiceClient(m.cli.Conn())
	return client.QueryUser(ctx, in, opts...)
}

func (m *defaultUserService) GetUserByEmail(ctx context.Context, in *EmailReq, opts ...grpc.CallOption) (*UserBody, error) {
	client := admin_system.NewUserServiceClient(m.cli.Conn())
	return client.GetUserByEmail(ctx, in, opts...)
}
