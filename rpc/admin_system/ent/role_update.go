// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/ent/menu"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/ent/predicate"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/ent/role"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/ent/user"
)

// RoleUpdate is the builder for updating Role entities.
type RoleUpdate struct {
	config
	hooks     []Hook
	mutation  *RoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RoleUpdate builder.
func (_u *RoleUpdate) Where(ps ...predicate.Role) *RoleUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RoleUpdate) SetUpdatedAt(v time.Time) *RoleUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetSort sets the "sort" field.
func (_u *RoleUpdate) SetSort(v uint32) *RoleUpdate {
	_u.mutation.ResetSort()
	_u.mutation.SetSort(v)
	return _u
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableSort(v *uint32) *RoleUpdate {
	if v != nil {
		_u.SetSort(*v)
	}
	return _u
}

// AddSort adds value to the "sort" field.
func (_u *RoleUpdate) AddSort(v int32) *RoleUpdate {
	_u.mutation.AddSort(v)
	return _u
}

// SetRoleName sets the "role_name" field.
func (_u *RoleUpdate) SetRoleName(v string) *RoleUpdate {
	_u.mutation.SetRoleName(v)
	return _u
}

// SetNillableRoleName sets the "role_name" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableRoleName(v *string) *RoleUpdate {
	if v != nil {
		_u.SetRoleName(*v)
	}
	return _u
}

// SetCode sets the "code" field.
func (_u *RoleUpdate) SetCode(v string) *RoleUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableCode(v *string) *RoleUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetRemark sets the "remark" field.
func (_u *RoleUpdate) SetRemark(v string) *RoleUpdate {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableRemark(v *string) *RoleUpdate {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// AddMenuIDs adds the "menus" edge to the Menu entity by IDs.
func (_u *RoleUpdate) AddMenuIDs(ids ...string) *RoleUpdate {
	_u.mutation.AddMenuIDs(ids...)
	return _u
}

// AddMenus adds the "menus" edges to the Menu entity.
func (_u *RoleUpdate) AddMenus(v ...*Menu) *RoleUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMenuIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_u *RoleUpdate) AddUserIDs(ids ...string) *RoleUpdate {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUsers adds the "users" edges to the User entity.
func (_u *RoleUpdate) AddUsers(v ...*User) *RoleUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (_u *RoleUpdate) Mutation() *RoleMutation {
	return _u.mutation
}

// ClearMenus clears all "menus" edges to the Menu entity.
func (_u *RoleUpdate) ClearMenus() *RoleUpdate {
	_u.mutation.ClearMenus()
	return _u
}

// RemoveMenuIDs removes the "menus" edge to Menu entities by IDs.
func (_u *RoleUpdate) RemoveMenuIDs(ids ...string) *RoleUpdate {
	_u.mutation.RemoveMenuIDs(ids...)
	return _u
}

// RemoveMenus removes "menus" edges to Menu entities.
func (_u *RoleUpdate) RemoveMenus(v ...*Menu) *RoleUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMenuIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (_u *RoleUpdate) ClearUsers() *RoleUpdate {
	_u.mutation.ClearUsers()
	return _u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (_u *RoleUpdate) RemoveUserIDs(ids ...string) *RoleUpdate {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUsers removes "users" edges to User entities.
func (_u *RoleUpdate) RemoveUsers(v ...*User) *RoleUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RoleUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RoleUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RoleUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RoleUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RoleUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := role.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RoleUpdate) check() error {
	if v, ok := _u.mutation.RoleName(); ok {
		if err := role.RoleNameValidator(v); err != nil {
			return &ValidationError{Name: "role_name", err: fmt.Errorf(`ent: validator failed for field "Role.role_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := role.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Role.code": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RoleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoleUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RoleUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Sort(); ok {
		_spec.SetField(role.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedSort(); ok {
		_spec.AddField(role.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.RoleName(); ok {
		_spec.SetField(role.FieldRoleName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(role.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(role.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.MenusTable,
			Columns: role.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMenusIDs(); len(nodes) > 0 && !_u.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.MenusTable,
			Columns: role.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.MenusTable,
			Columns: role.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: role.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUsersIDs(); len(nodes) > 0 && !_u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: role.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: role.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RoleUpdateOne is the builder for updating a single Role entity.
type RoleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RoleUpdateOne) SetUpdatedAt(v time.Time) *RoleUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetSort sets the "sort" field.
func (_u *RoleUpdateOne) SetSort(v uint32) *RoleUpdateOne {
	_u.mutation.ResetSort()
	_u.mutation.SetSort(v)
	return _u
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableSort(v *uint32) *RoleUpdateOne {
	if v != nil {
		_u.SetSort(*v)
	}
	return _u
}

// AddSort adds value to the "sort" field.
func (_u *RoleUpdateOne) AddSort(v int32) *RoleUpdateOne {
	_u.mutation.AddSort(v)
	return _u
}

// SetRoleName sets the "role_name" field.
func (_u *RoleUpdateOne) SetRoleName(v string) *RoleUpdateOne {
	_u.mutation.SetRoleName(v)
	return _u
}

// SetNillableRoleName sets the "role_name" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableRoleName(v *string) *RoleUpdateOne {
	if v != nil {
		_u.SetRoleName(*v)
	}
	return _u
}

// SetCode sets the "code" field.
func (_u *RoleUpdateOne) SetCode(v string) *RoleUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableCode(v *string) *RoleUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetRemark sets the "remark" field.
func (_u *RoleUpdateOne) SetRemark(v string) *RoleUpdateOne {
	_u.mutation.SetRemark(v)
	return _u
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableRemark(v *string) *RoleUpdateOne {
	if v != nil {
		_u.SetRemark(*v)
	}
	return _u
}

// AddMenuIDs adds the "menus" edge to the Menu entity by IDs.
func (_u *RoleUpdateOne) AddMenuIDs(ids ...string) *RoleUpdateOne {
	_u.mutation.AddMenuIDs(ids...)
	return _u
}

// AddMenus adds the "menus" edges to the Menu entity.
func (_u *RoleUpdateOne) AddMenus(v ...*Menu) *RoleUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMenuIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_u *RoleUpdateOne) AddUserIDs(ids ...string) *RoleUpdateOne {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUsers adds the "users" edges to the User entity.
func (_u *RoleUpdateOne) AddUsers(v ...*User) *RoleUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// Mutation returns the RoleMutation object of the builder.
func (_u *RoleUpdateOne) Mutation() *RoleMutation {
	return _u.mutation
}

// ClearMenus clears all "menus" edges to the Menu entity.
func (_u *RoleUpdateOne) ClearMenus() *RoleUpdateOne {
	_u.mutation.ClearMenus()
	return _u
}

// RemoveMenuIDs removes the "menus" edge to Menu entities by IDs.
func (_u *RoleUpdateOne) RemoveMenuIDs(ids ...string) *RoleUpdateOne {
	_u.mutation.RemoveMenuIDs(ids...)
	return _u
}

// RemoveMenus removes "menus" edges to Menu entities.
func (_u *RoleUpdateOne) RemoveMenus(v ...*Menu) *RoleUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMenuIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (_u *RoleUpdateOne) ClearUsers() *RoleUpdateOne {
	_u.mutation.ClearUsers()
	return _u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (_u *RoleUpdateOne) RemoveUserIDs(ids ...string) *RoleUpdateOne {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUsers removes "users" edges to User entities.
func (_u *RoleUpdateOne) RemoveUsers(v ...*User) *RoleUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the RoleUpdate builder.
func (_u *RoleUpdateOne) Where(ps ...predicate.Role) *RoleUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RoleUpdateOne) Select(field string, fields ...string) *RoleUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Role entity.
func (_u *RoleUpdateOne) Save(ctx context.Context) (*Role, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RoleUpdateOne) SaveX(ctx context.Context) *Role {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RoleUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RoleUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RoleUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := role.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RoleUpdateOne) check() error {
	if v, ok := _u.mutation.RoleName(); ok {
		if err := role.RoleNameValidator(v); err != nil {
			return &ValidationError{Name: "role_name", err: fmt.Errorf(`ent: validator failed for field "Role.role_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Code(); ok {
		if err := role.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Role.code": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RoleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoleUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RoleUpdateOne) sqlSave(ctx context.Context) (_node *Role, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Role.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, role.FieldID)
		for _, f := range fields {
			if !role.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Sort(); ok {
		_spec.SetField(role.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedSort(); ok {
		_spec.AddField(role.FieldSort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.RoleName(); ok {
		_spec.SetField(role.FieldRoleName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(role.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.Remark(); ok {
		_spec.SetField(role.FieldRemark, field.TypeString, value)
	}
	if _u.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.MenusTable,
			Columns: role.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMenusIDs(); len(nodes) > 0 && !_u.mutation.MenusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.MenusTable,
			Columns: role.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MenusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.MenusTable,
			Columns: role.MenusPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: role.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUsersIDs(); len(nodes) > 0 && !_u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: role.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: role.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &Role{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
