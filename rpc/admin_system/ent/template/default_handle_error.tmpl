{{/* gotype: entgo.io/ent/entc/gen.Graph */}}


{{ define "default_handle_error" }}

    {{/* Add the base header for the generated file */}}
    {{ $pkg := base $.Config.Package }}
    {{ template "header" $ }}
    {{ template "import" $ }}

    func DefaultHandleError(logger logx.Logger, err error, detail any) error {
        if err != nil {
            switch {
            case IsValidationError(err):
                logger.Errorw(err.Error(), logx.Field("detail", detail))
                return errorc.GRPCInvalidArgumentError(msgc.ENT_VALIDATION_ERROR)
            case IsNotFound(err):
                logger.Errorw(err.Error(), logx.Field("detail", detail))
                return errorc.GRPCNotFoundError(msgc.ENT_NOTFOUND_ERROR)
            case IsNotSingular(err):
                logger.Errorw(err.Error(), logx.Field("detail", detail))
                return errorc.GRPCFailedPreconditionError(msgc.ENT_NOT_SINGULAR_ERROR)
            case IsNotLoaded(err):
                logger.Errorw(err.Error(), logx.Field("detail", detail))
                return errorc.GRPCInternalError(msgc.ENT_NOT_LOADED_ERROR)
            case IsConstraintError(err):
                logger.Errorw(err.Error(), logx.Field("detail", detail))
                return errorc.GRPCAlreadyExistsError(msgc.ENT_CONSTRAINT_ERROR)
            default:
                logger.Errorw("ent unknown error", logx.Field("detail", err.Error()))
                return errorc.GRPCInternalError(msgc.ENT_UNKNOWN_ERROR)
            }
        }
        return err
    }


{{ end }}
