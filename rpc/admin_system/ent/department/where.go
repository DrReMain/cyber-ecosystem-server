// Code generated by ent, DO NOT EDIT.

package department

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Department {
	return predicate.Department(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Department {
	return predicate.Department(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldUpdatedAt, v))
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v uint32) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldSort, v))
}

// DepartmentName applies equality check predicate on the "department_name" field. It's identical to DepartmentNameEQ.
func DepartmentName(v string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldDepartmentName, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldRemark, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldParentID, v))
}

// IDPath applies equality check predicate on the "id_path" field. It's identical to IDPathEQ.
func IDPath(v string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldIDPath, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldUpdatedAt, v))
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v uint32) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldSort, v))
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v uint32) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldSort, v))
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...uint32) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldSort, vs...))
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...uint32) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldSort, vs...))
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v uint32) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldSort, v))
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v uint32) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldSort, v))
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v uint32) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldSort, v))
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v uint32) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldSort, v))
}

// DepartmentNameEQ applies the EQ predicate on the "department_name" field.
func DepartmentNameEQ(v string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldDepartmentName, v))
}

// DepartmentNameNEQ applies the NEQ predicate on the "department_name" field.
func DepartmentNameNEQ(v string) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldDepartmentName, v))
}

// DepartmentNameIn applies the In predicate on the "department_name" field.
func DepartmentNameIn(vs ...string) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldDepartmentName, vs...))
}

// DepartmentNameNotIn applies the NotIn predicate on the "department_name" field.
func DepartmentNameNotIn(vs ...string) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldDepartmentName, vs...))
}

// DepartmentNameGT applies the GT predicate on the "department_name" field.
func DepartmentNameGT(v string) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldDepartmentName, v))
}

// DepartmentNameGTE applies the GTE predicate on the "department_name" field.
func DepartmentNameGTE(v string) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldDepartmentName, v))
}

// DepartmentNameLT applies the LT predicate on the "department_name" field.
func DepartmentNameLT(v string) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldDepartmentName, v))
}

// DepartmentNameLTE applies the LTE predicate on the "department_name" field.
func DepartmentNameLTE(v string) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldDepartmentName, v))
}

// DepartmentNameContains applies the Contains predicate on the "department_name" field.
func DepartmentNameContains(v string) predicate.Department {
	return predicate.Department(sql.FieldContains(FieldDepartmentName, v))
}

// DepartmentNameHasPrefix applies the HasPrefix predicate on the "department_name" field.
func DepartmentNameHasPrefix(v string) predicate.Department {
	return predicate.Department(sql.FieldHasPrefix(FieldDepartmentName, v))
}

// DepartmentNameHasSuffix applies the HasSuffix predicate on the "department_name" field.
func DepartmentNameHasSuffix(v string) predicate.Department {
	return predicate.Department(sql.FieldHasSuffix(FieldDepartmentName, v))
}

// DepartmentNameEqualFold applies the EqualFold predicate on the "department_name" field.
func DepartmentNameEqualFold(v string) predicate.Department {
	return predicate.Department(sql.FieldEqualFold(FieldDepartmentName, v))
}

// DepartmentNameContainsFold applies the ContainsFold predicate on the "department_name" field.
func DepartmentNameContainsFold(v string) predicate.Department {
	return predicate.Department(sql.FieldContainsFold(FieldDepartmentName, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Department {
	return predicate.Department(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Department {
	return predicate.Department(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Department {
	return predicate.Department(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Department {
	return predicate.Department(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Department {
	return predicate.Department(sql.FieldContainsFold(FieldRemark, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v string) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...string) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...string) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDGT applies the GT predicate on the "parent_id" field.
func ParentIDGT(v string) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldParentID, v))
}

// ParentIDGTE applies the GTE predicate on the "parent_id" field.
func ParentIDGTE(v string) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldParentID, v))
}

// ParentIDLT applies the LT predicate on the "parent_id" field.
func ParentIDLT(v string) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldParentID, v))
}

// ParentIDLTE applies the LTE predicate on the "parent_id" field.
func ParentIDLTE(v string) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldParentID, v))
}

// ParentIDContains applies the Contains predicate on the "parent_id" field.
func ParentIDContains(v string) predicate.Department {
	return predicate.Department(sql.FieldContains(FieldParentID, v))
}

// ParentIDHasPrefix applies the HasPrefix predicate on the "parent_id" field.
func ParentIDHasPrefix(v string) predicate.Department {
	return predicate.Department(sql.FieldHasPrefix(FieldParentID, v))
}

// ParentIDHasSuffix applies the HasSuffix predicate on the "parent_id" field.
func ParentIDHasSuffix(v string) predicate.Department {
	return predicate.Department(sql.FieldHasSuffix(FieldParentID, v))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.Department {
	return predicate.Department(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.Department {
	return predicate.Department(sql.FieldNotNull(FieldParentID))
}

// ParentIDEqualFold applies the EqualFold predicate on the "parent_id" field.
func ParentIDEqualFold(v string) predicate.Department {
	return predicate.Department(sql.FieldEqualFold(FieldParentID, v))
}

// ParentIDContainsFold applies the ContainsFold predicate on the "parent_id" field.
func ParentIDContainsFold(v string) predicate.Department {
	return predicate.Department(sql.FieldContainsFold(FieldParentID, v))
}

// IDPathEQ applies the EQ predicate on the "id_path" field.
func IDPathEQ(v string) predicate.Department {
	return predicate.Department(sql.FieldEQ(FieldIDPath, v))
}

// IDPathNEQ applies the NEQ predicate on the "id_path" field.
func IDPathNEQ(v string) predicate.Department {
	return predicate.Department(sql.FieldNEQ(FieldIDPath, v))
}

// IDPathIn applies the In predicate on the "id_path" field.
func IDPathIn(vs ...string) predicate.Department {
	return predicate.Department(sql.FieldIn(FieldIDPath, vs...))
}

// IDPathNotIn applies the NotIn predicate on the "id_path" field.
func IDPathNotIn(vs ...string) predicate.Department {
	return predicate.Department(sql.FieldNotIn(FieldIDPath, vs...))
}

// IDPathGT applies the GT predicate on the "id_path" field.
func IDPathGT(v string) predicate.Department {
	return predicate.Department(sql.FieldGT(FieldIDPath, v))
}

// IDPathGTE applies the GTE predicate on the "id_path" field.
func IDPathGTE(v string) predicate.Department {
	return predicate.Department(sql.FieldGTE(FieldIDPath, v))
}

// IDPathLT applies the LT predicate on the "id_path" field.
func IDPathLT(v string) predicate.Department {
	return predicate.Department(sql.FieldLT(FieldIDPath, v))
}

// IDPathLTE applies the LTE predicate on the "id_path" field.
func IDPathLTE(v string) predicate.Department {
	return predicate.Department(sql.FieldLTE(FieldIDPath, v))
}

// IDPathContains applies the Contains predicate on the "id_path" field.
func IDPathContains(v string) predicate.Department {
	return predicate.Department(sql.FieldContains(FieldIDPath, v))
}

// IDPathHasPrefix applies the HasPrefix predicate on the "id_path" field.
func IDPathHasPrefix(v string) predicate.Department {
	return predicate.Department(sql.FieldHasPrefix(FieldIDPath, v))
}

// IDPathHasSuffix applies the HasSuffix predicate on the "id_path" field.
func IDPathHasSuffix(v string) predicate.Department {
	return predicate.Department(sql.FieldHasSuffix(FieldIDPath, v))
}

// IDPathEqualFold applies the EqualFold predicate on the "id_path" field.
func IDPathEqualFold(v string) predicate.Department {
	return predicate.Department(sql.FieldEqualFold(FieldIDPath, v))
}

// IDPathContainsFold applies the ContainsFold predicate on the "id_path" field.
func IDPathContainsFold(v string) predicate.Department {
	return predicate.Department(sql.FieldContainsFold(FieldIDPath, v))
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Department {
	return predicate.Department(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Department) predicate.Department {
	return predicate.Department(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Department {
	return predicate.Department(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Department) predicate.Department {
	return predicate.Department(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Department {
	return predicate.Department(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Department {
	return predicate.Department(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Department) predicate.Department {
	return predicate.Department(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Department) predicate.Department {
	return predicate.Department(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Department) predicate.Department {
	return predicate.Department(sql.NotPredicates(p))
}
