// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/ent/menu"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/ent/predicate"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/ent/resource"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/ent/role"
)

// MenuUpdate is the builder for updating Menu entities.
type MenuUpdate struct {
	config
	hooks     []Hook
	mutation  *MenuMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MenuUpdate builder.
func (mu *MenuUpdate) Where(ps ...predicate.Menu) *MenuUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MenuUpdate) SetUpdatedAt(t time.Time) *MenuUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetSort sets the "sort" field.
func (mu *MenuUpdate) SetSort(u uint32) *MenuUpdate {
	mu.mutation.ResetSort()
	mu.mutation.SetSort(u)
	return mu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableSort(u *uint32) *MenuUpdate {
	if u != nil {
		mu.SetSort(*u)
	}
	return mu
}

// AddSort adds u to the "sort" field.
func (mu *MenuUpdate) AddSort(u int32) *MenuUpdate {
	mu.mutation.AddSort(u)
	return mu
}

// SetStatus sets the "status" field.
func (mu *MenuUpdate) SetStatus(u uint8) *MenuUpdate {
	mu.mutation.ResetStatus()
	mu.mutation.SetStatus(u)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableStatus(u *uint8) *MenuUpdate {
	if u != nil {
		mu.SetStatus(*u)
	}
	return mu
}

// AddStatus adds u to the "status" field.
func (mu *MenuUpdate) AddStatus(u int8) *MenuUpdate {
	mu.mutation.AddStatus(u)
	return mu
}

// ClearStatus clears the value of the "status" field.
func (mu *MenuUpdate) ClearStatus() *MenuUpdate {
	mu.mutation.ClearStatus()
	return mu
}

// SetTitle sets the "title" field.
func (mu *MenuUpdate) SetTitle(s string) *MenuUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableTitle(s *string) *MenuUpdate {
	if s != nil {
		mu.SetTitle(*s)
	}
	return mu
}

// SetIcon sets the "icon" field.
func (mu *MenuUpdate) SetIcon(s string) *MenuUpdate {
	mu.mutation.SetIcon(s)
	return mu
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableIcon(s *string) *MenuUpdate {
	if s != nil {
		mu.SetIcon(*s)
	}
	return mu
}

// SetCode sets the "code" field.
func (mu *MenuUpdate) SetCode(s string) *MenuUpdate {
	mu.mutation.SetCode(s)
	return mu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableCode(s *string) *MenuUpdate {
	if s != nil {
		mu.SetCode(*s)
	}
	return mu
}

// SetCodePath sets the "code_path" field.
func (mu *MenuUpdate) SetCodePath(s string) *MenuUpdate {
	mu.mutation.SetCodePath(s)
	return mu
}

// SetNillableCodePath sets the "code_path" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableCodePath(s *string) *MenuUpdate {
	if s != nil {
		mu.SetCodePath(*s)
	}
	return mu
}

// SetParentID sets the "parent_id" field.
func (mu *MenuUpdate) SetParentID(s string) *MenuUpdate {
	mu.mutation.SetParentID(s)
	return mu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableParentID(s *string) *MenuUpdate {
	if s != nil {
		mu.SetParentID(*s)
	}
	return mu
}

// SetMenuType sets the "menu_type" field.
func (mu *MenuUpdate) SetMenuType(s string) *MenuUpdate {
	mu.mutation.SetMenuType(s)
	return mu
}

// SetNillableMenuType sets the "menu_type" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableMenuType(s *string) *MenuUpdate {
	if s != nil {
		mu.SetMenuType(*s)
	}
	return mu
}

// SetMenuPath sets the "menu_path" field.
func (mu *MenuUpdate) SetMenuPath(s string) *MenuUpdate {
	mu.mutation.SetMenuPath(s)
	return mu
}

// SetNillableMenuPath sets the "menu_path" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableMenuPath(s *string) *MenuUpdate {
	if s != nil {
		mu.SetMenuPath(*s)
	}
	return mu
}

// SetProperties sets the "properties" field.
func (mu *MenuUpdate) SetProperties(s string) *MenuUpdate {
	mu.mutation.SetProperties(s)
	return mu
}

// SetNillableProperties sets the "properties" field if the given value is not nil.
func (mu *MenuUpdate) SetNillableProperties(s *string) *MenuUpdate {
	if s != nil {
		mu.SetProperties(*s)
	}
	return mu
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (mu *MenuUpdate) AddRoleIDs(ids ...string) *MenuUpdate {
	mu.mutation.AddRoleIDs(ids...)
	return mu
}

// AddRoles adds the "roles" edges to the Role entity.
func (mu *MenuUpdate) AddRoles(r ...*Role) *MenuUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.AddRoleIDs(ids...)
}

// SetParent sets the "parent" edge to the Menu entity.
func (mu *MenuUpdate) SetParent(m *Menu) *MenuUpdate {
	return mu.SetParentID(m.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (mu *MenuUpdate) AddChildIDs(ids ...string) *MenuUpdate {
	mu.mutation.AddChildIDs(ids...)
	return mu
}

// AddChildren adds the "children" edges to the Menu entity.
func (mu *MenuUpdate) AddChildren(m ...*Menu) *MenuUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddChildIDs(ids...)
}

// AddResourceIDs adds the "resources" edge to the Resource entity by IDs.
func (mu *MenuUpdate) AddResourceIDs(ids ...string) *MenuUpdate {
	mu.mutation.AddResourceIDs(ids...)
	return mu
}

// AddResources adds the "resources" edges to the Resource entity.
func (mu *MenuUpdate) AddResources(r ...*Resource) *MenuUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.AddResourceIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (mu *MenuUpdate) Mutation() *MenuMutation {
	return mu.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (mu *MenuUpdate) ClearRoles() *MenuUpdate {
	mu.mutation.ClearRoles()
	return mu
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (mu *MenuUpdate) RemoveRoleIDs(ids ...string) *MenuUpdate {
	mu.mutation.RemoveRoleIDs(ids...)
	return mu
}

// RemoveRoles removes "roles" edges to Role entities.
func (mu *MenuUpdate) RemoveRoles(r ...*Role) *MenuUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.RemoveRoleIDs(ids...)
}

// ClearParent clears the "parent" edge to the Menu entity.
func (mu *MenuUpdate) ClearParent() *MenuUpdate {
	mu.mutation.ClearParent()
	return mu
}

// ClearChildren clears all "children" edges to the Menu entity.
func (mu *MenuUpdate) ClearChildren() *MenuUpdate {
	mu.mutation.ClearChildren()
	return mu
}

// RemoveChildIDs removes the "children" edge to Menu entities by IDs.
func (mu *MenuUpdate) RemoveChildIDs(ids ...string) *MenuUpdate {
	mu.mutation.RemoveChildIDs(ids...)
	return mu
}

// RemoveChildren removes "children" edges to Menu entities.
func (mu *MenuUpdate) RemoveChildren(m ...*Menu) *MenuUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveChildIDs(ids...)
}

// ClearResources clears all "resources" edges to the Resource entity.
func (mu *MenuUpdate) ClearResources() *MenuUpdate {
	mu.mutation.ClearResources()
	return mu
}

// RemoveResourceIDs removes the "resources" edge to Resource entities by IDs.
func (mu *MenuUpdate) RemoveResourceIDs(ids ...string) *MenuUpdate {
	mu.mutation.RemoveResourceIDs(ids...)
	return mu
}

// RemoveResources removes "resources" edges to Resource entities.
func (mu *MenuUpdate) RemoveResources(r ...*Resource) *MenuUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.RemoveResourceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MenuUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MenuUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MenuUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MenuUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MenuUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := menu.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MenuUpdate) check() error {
	if v, ok := mu.mutation.Code(); ok {
		if err := menu.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Menu.code": %w`, err)}
		}
	}
	if v, ok := mu.mutation.MenuType(); ok {
		if err := menu.MenuTypeValidator(v); err != nil {
			return &ValidationError{Name: "menu_type", err: fmt.Errorf(`ent: validator failed for field "Menu.menu_type": %w`, err)}
		}
	}
	if mu.mutation.ParentCleared() && len(mu.mutation.ParentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Menu.parent"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *MenuUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MenuUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *MenuUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Sort(); ok {
		_spec.SetField(menu.FieldSort, field.TypeUint32, value)
	}
	if value, ok := mu.mutation.AddedSort(); ok {
		_spec.AddField(menu.FieldSort, field.TypeUint32, value)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := mu.mutation.AddedStatus(); ok {
		_spec.AddField(menu.FieldStatus, field.TypeUint8, value)
	}
	if mu.mutation.StatusCleared() {
		_spec.ClearField(menu.FieldStatus, field.TypeUint8)
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.SetField(menu.FieldTitle, field.TypeString, value)
	}
	if value, ok := mu.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
	}
	if value, ok := mu.mutation.Code(); ok {
		_spec.SetField(menu.FieldCode, field.TypeString, value)
	}
	if value, ok := mu.mutation.CodePath(); ok {
		_spec.SetField(menu.FieldCodePath, field.TypeString, value)
	}
	if value, ok := mu.mutation.MenuType(); ok {
		_spec.SetField(menu.FieldMenuType, field.TypeString, value)
	}
	if value, ok := mu.mutation.MenuPath(); ok {
		_spec.SetField(menu.FieldMenuPath, field.TypeString, value)
	}
	if value, ok := mu.mutation.Properties(); ok {
		_spec.SetField(menu.FieldProperties, field.TypeString, value)
	}
	if mu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !mu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !mu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ResourcesTable,
			Columns: []string{menu.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedResourcesIDs(); len(nodes) > 0 && !mu.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ResourcesTable,
			Columns: []string{menu.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ResourcesTable,
			Columns: []string{menu.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MenuUpdateOne is the builder for updating a single Menu entity.
type MenuUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MenuMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MenuUpdateOne) SetUpdatedAt(t time.Time) *MenuUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetSort sets the "sort" field.
func (muo *MenuUpdateOne) SetSort(u uint32) *MenuUpdateOne {
	muo.mutation.ResetSort()
	muo.mutation.SetSort(u)
	return muo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableSort(u *uint32) *MenuUpdateOne {
	if u != nil {
		muo.SetSort(*u)
	}
	return muo
}

// AddSort adds u to the "sort" field.
func (muo *MenuUpdateOne) AddSort(u int32) *MenuUpdateOne {
	muo.mutation.AddSort(u)
	return muo
}

// SetStatus sets the "status" field.
func (muo *MenuUpdateOne) SetStatus(u uint8) *MenuUpdateOne {
	muo.mutation.ResetStatus()
	muo.mutation.SetStatus(u)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableStatus(u *uint8) *MenuUpdateOne {
	if u != nil {
		muo.SetStatus(*u)
	}
	return muo
}

// AddStatus adds u to the "status" field.
func (muo *MenuUpdateOne) AddStatus(u int8) *MenuUpdateOne {
	muo.mutation.AddStatus(u)
	return muo
}

// ClearStatus clears the value of the "status" field.
func (muo *MenuUpdateOne) ClearStatus() *MenuUpdateOne {
	muo.mutation.ClearStatus()
	return muo
}

// SetTitle sets the "title" field.
func (muo *MenuUpdateOne) SetTitle(s string) *MenuUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableTitle(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetTitle(*s)
	}
	return muo
}

// SetIcon sets the "icon" field.
func (muo *MenuUpdateOne) SetIcon(s string) *MenuUpdateOne {
	muo.mutation.SetIcon(s)
	return muo
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableIcon(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetIcon(*s)
	}
	return muo
}

// SetCode sets the "code" field.
func (muo *MenuUpdateOne) SetCode(s string) *MenuUpdateOne {
	muo.mutation.SetCode(s)
	return muo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableCode(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetCode(*s)
	}
	return muo
}

// SetCodePath sets the "code_path" field.
func (muo *MenuUpdateOne) SetCodePath(s string) *MenuUpdateOne {
	muo.mutation.SetCodePath(s)
	return muo
}

// SetNillableCodePath sets the "code_path" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableCodePath(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetCodePath(*s)
	}
	return muo
}

// SetParentID sets the "parent_id" field.
func (muo *MenuUpdateOne) SetParentID(s string) *MenuUpdateOne {
	muo.mutation.SetParentID(s)
	return muo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableParentID(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetParentID(*s)
	}
	return muo
}

// SetMenuType sets the "menu_type" field.
func (muo *MenuUpdateOne) SetMenuType(s string) *MenuUpdateOne {
	muo.mutation.SetMenuType(s)
	return muo
}

// SetNillableMenuType sets the "menu_type" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableMenuType(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetMenuType(*s)
	}
	return muo
}

// SetMenuPath sets the "menu_path" field.
func (muo *MenuUpdateOne) SetMenuPath(s string) *MenuUpdateOne {
	muo.mutation.SetMenuPath(s)
	return muo
}

// SetNillableMenuPath sets the "menu_path" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableMenuPath(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetMenuPath(*s)
	}
	return muo
}

// SetProperties sets the "properties" field.
func (muo *MenuUpdateOne) SetProperties(s string) *MenuUpdateOne {
	muo.mutation.SetProperties(s)
	return muo
}

// SetNillableProperties sets the "properties" field if the given value is not nil.
func (muo *MenuUpdateOne) SetNillableProperties(s *string) *MenuUpdateOne {
	if s != nil {
		muo.SetProperties(*s)
	}
	return muo
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (muo *MenuUpdateOne) AddRoleIDs(ids ...string) *MenuUpdateOne {
	muo.mutation.AddRoleIDs(ids...)
	return muo
}

// AddRoles adds the "roles" edges to the Role entity.
func (muo *MenuUpdateOne) AddRoles(r ...*Role) *MenuUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.AddRoleIDs(ids...)
}

// SetParent sets the "parent" edge to the Menu entity.
func (muo *MenuUpdateOne) SetParent(m *Menu) *MenuUpdateOne {
	return muo.SetParentID(m.ID)
}

// AddChildIDs adds the "children" edge to the Menu entity by IDs.
func (muo *MenuUpdateOne) AddChildIDs(ids ...string) *MenuUpdateOne {
	muo.mutation.AddChildIDs(ids...)
	return muo
}

// AddChildren adds the "children" edges to the Menu entity.
func (muo *MenuUpdateOne) AddChildren(m ...*Menu) *MenuUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddChildIDs(ids...)
}

// AddResourceIDs adds the "resources" edge to the Resource entity by IDs.
func (muo *MenuUpdateOne) AddResourceIDs(ids ...string) *MenuUpdateOne {
	muo.mutation.AddResourceIDs(ids...)
	return muo
}

// AddResources adds the "resources" edges to the Resource entity.
func (muo *MenuUpdateOne) AddResources(r ...*Resource) *MenuUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.AddResourceIDs(ids...)
}

// Mutation returns the MenuMutation object of the builder.
func (muo *MenuUpdateOne) Mutation() *MenuMutation {
	return muo.mutation
}

// ClearRoles clears all "roles" edges to the Role entity.
func (muo *MenuUpdateOne) ClearRoles() *MenuUpdateOne {
	muo.mutation.ClearRoles()
	return muo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (muo *MenuUpdateOne) RemoveRoleIDs(ids ...string) *MenuUpdateOne {
	muo.mutation.RemoveRoleIDs(ids...)
	return muo
}

// RemoveRoles removes "roles" edges to Role entities.
func (muo *MenuUpdateOne) RemoveRoles(r ...*Role) *MenuUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.RemoveRoleIDs(ids...)
}

// ClearParent clears the "parent" edge to the Menu entity.
func (muo *MenuUpdateOne) ClearParent() *MenuUpdateOne {
	muo.mutation.ClearParent()
	return muo
}

// ClearChildren clears all "children" edges to the Menu entity.
func (muo *MenuUpdateOne) ClearChildren() *MenuUpdateOne {
	muo.mutation.ClearChildren()
	return muo
}

// RemoveChildIDs removes the "children" edge to Menu entities by IDs.
func (muo *MenuUpdateOne) RemoveChildIDs(ids ...string) *MenuUpdateOne {
	muo.mutation.RemoveChildIDs(ids...)
	return muo
}

// RemoveChildren removes "children" edges to Menu entities.
func (muo *MenuUpdateOne) RemoveChildren(m ...*Menu) *MenuUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveChildIDs(ids...)
}

// ClearResources clears all "resources" edges to the Resource entity.
func (muo *MenuUpdateOne) ClearResources() *MenuUpdateOne {
	muo.mutation.ClearResources()
	return muo
}

// RemoveResourceIDs removes the "resources" edge to Resource entities by IDs.
func (muo *MenuUpdateOne) RemoveResourceIDs(ids ...string) *MenuUpdateOne {
	muo.mutation.RemoveResourceIDs(ids...)
	return muo
}

// RemoveResources removes "resources" edges to Resource entities.
func (muo *MenuUpdateOne) RemoveResources(r ...*Resource) *MenuUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.RemoveResourceIDs(ids...)
}

// Where appends a list predicates to the MenuUpdate builder.
func (muo *MenuUpdateOne) Where(ps ...predicate.Menu) *MenuUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MenuUpdateOne) Select(field string, fields ...string) *MenuUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Menu entity.
func (muo *MenuUpdateOne) Save(ctx context.Context) (*Menu, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MenuUpdateOne) SaveX(ctx context.Context) *Menu {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MenuUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MenuUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MenuUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := menu.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MenuUpdateOne) check() error {
	if v, ok := muo.mutation.Code(); ok {
		if err := menu.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Menu.code": %w`, err)}
		}
	}
	if v, ok := muo.mutation.MenuType(); ok {
		if err := menu.MenuTypeValidator(v); err != nil {
			return &ValidationError{Name: "menu_type", err: fmt.Errorf(`ent: validator failed for field "Menu.menu_type": %w`, err)}
		}
	}
	if muo.mutation.ParentCleared() && len(muo.mutation.ParentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Menu.parent"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *MenuUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MenuUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *MenuUpdateOne) sqlSave(ctx context.Context) (_node *Menu, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(menu.Table, menu.Columns, sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Menu.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, menu.FieldID)
		for _, f := range fields {
			if !menu.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != menu.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(menu.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Sort(); ok {
		_spec.SetField(menu.FieldSort, field.TypeUint32, value)
	}
	if value, ok := muo.mutation.AddedSort(); ok {
		_spec.AddField(menu.FieldSort, field.TypeUint32, value)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(menu.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := muo.mutation.AddedStatus(); ok {
		_spec.AddField(menu.FieldStatus, field.TypeUint8, value)
	}
	if muo.mutation.StatusCleared() {
		_spec.ClearField(menu.FieldStatus, field.TypeUint8)
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.SetField(menu.FieldTitle, field.TypeString, value)
	}
	if value, ok := muo.mutation.Icon(); ok {
		_spec.SetField(menu.FieldIcon, field.TypeString, value)
	}
	if value, ok := muo.mutation.Code(); ok {
		_spec.SetField(menu.FieldCode, field.TypeString, value)
	}
	if value, ok := muo.mutation.CodePath(); ok {
		_spec.SetField(menu.FieldCodePath, field.TypeString, value)
	}
	if value, ok := muo.mutation.MenuType(); ok {
		_spec.SetField(menu.FieldMenuType, field.TypeString, value)
	}
	if value, ok := muo.mutation.MenuPath(); ok {
		_spec.SetField(menu.FieldMenuPath, field.TypeString, value)
	}
	if value, ok := muo.mutation.Properties(); ok {
		_spec.SetField(menu.FieldProperties, field.TypeString, value)
	}
	if muo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !muo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   menu.RolesTable,
			Columns: menu.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   menu.ParentTable,
			Columns: []string{menu.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !muo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ChildrenTable,
			Columns: []string{menu.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(menu.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ResourcesTable,
			Columns: []string{menu.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedResourcesIDs(); len(nodes) > 0 && !muo.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ResourcesTable,
			Columns: []string{menu.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   menu.ResourcesTable,
			Columns: []string{menu.ResourcesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(muo.modifiers...)
	_node = &Menu{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menu.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
