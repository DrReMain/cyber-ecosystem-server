// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/ent/department"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/ent/menu"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/ent/position"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/ent/predicate"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/ent/resource"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/ent/role"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/ent/user"
)

type PredicateDepartment struct {
	predicates []predicate.Department
}

func NewPredicateDepartment() *PredicateDepartment {
	return &PredicateDepartment{predicates: []predicate.Department{}}
}
func (p *PredicateDepartment) Submit() []predicate.Department {
	return p.predicates
}
func (p *PredicateDepartment) ApplyCreatedAt(at []int64) *PredicateDepartment {
	if at != nil && len(at) > 0 {
		start := time.UnixMilli(at[0])
		p.predicates = append(p.predicates, department.CreatedAtGTE(start))
		if len(at) > 1 {
			end := time.UnixMilli(at[1])
			p.predicates = append(p.predicates, department.CreatedAtLTE(end))
		}
	}
	return p
}
func (p *PredicateDepartment) ApplyUpdatedAt(at []int64) *PredicateDepartment {
	if at != nil && len(at) > 0 {
		start := time.UnixMilli(at[0])
		p.predicates = append(p.predicates, department.UpdatedAtGTE(start))
		if len(at) > 1 {
			end := time.UnixMilli(at[1])
			p.predicates = append(p.predicates, department.UpdatedAtLTE(end))
		}
	}
	return p
}
func (p *PredicateDepartment) Apply(c bool, f func() predicate.Department) *PredicateDepartment {
	if c {
		p.predicates = append(p.predicates, f())
	}
	return p
}

type PredicateMenu struct {
	predicates []predicate.Menu
}

func NewPredicateMenu() *PredicateMenu {
	return &PredicateMenu{predicates: []predicate.Menu{}}
}
func (p *PredicateMenu) Submit() []predicate.Menu {
	return p.predicates
}
func (p *PredicateMenu) ApplyCreatedAt(at []int64) *PredicateMenu {
	if at != nil && len(at) > 0 {
		start := time.UnixMilli(at[0])
		p.predicates = append(p.predicates, menu.CreatedAtGTE(start))
		if len(at) > 1 {
			end := time.UnixMilli(at[1])
			p.predicates = append(p.predicates, menu.CreatedAtLTE(end))
		}
	}
	return p
}
func (p *PredicateMenu) ApplyUpdatedAt(at []int64) *PredicateMenu {
	if at != nil && len(at) > 0 {
		start := time.UnixMilli(at[0])
		p.predicates = append(p.predicates, menu.UpdatedAtGTE(start))
		if len(at) > 1 {
			end := time.UnixMilli(at[1])
			p.predicates = append(p.predicates, menu.UpdatedAtLTE(end))
		}
	}
	return p
}
func (p *PredicateMenu) Apply(c bool, f func() predicate.Menu) *PredicateMenu {
	if c {
		p.predicates = append(p.predicates, f())
	}
	return p
}

type PredicatePosition struct {
	predicates []predicate.Position
}

func NewPredicatePosition() *PredicatePosition {
	return &PredicatePosition{predicates: []predicate.Position{}}
}
func (p *PredicatePosition) Submit() []predicate.Position {
	return p.predicates
}
func (p *PredicatePosition) ApplyCreatedAt(at []int64) *PredicatePosition {
	if at != nil && len(at) > 0 {
		start := time.UnixMilli(at[0])
		p.predicates = append(p.predicates, position.CreatedAtGTE(start))
		if len(at) > 1 {
			end := time.UnixMilli(at[1])
			p.predicates = append(p.predicates, position.CreatedAtLTE(end))
		}
	}
	return p
}
func (p *PredicatePosition) ApplyUpdatedAt(at []int64) *PredicatePosition {
	if at != nil && len(at) > 0 {
		start := time.UnixMilli(at[0])
		p.predicates = append(p.predicates, position.UpdatedAtGTE(start))
		if len(at) > 1 {
			end := time.UnixMilli(at[1])
			p.predicates = append(p.predicates, position.UpdatedAtLTE(end))
		}
	}
	return p
}
func (p *PredicatePosition) Apply(c bool, f func() predicate.Position) *PredicatePosition {
	if c {
		p.predicates = append(p.predicates, f())
	}
	return p
}

type PredicateResource struct {
	predicates []predicate.Resource
}

func NewPredicateResource() *PredicateResource {
	return &PredicateResource{predicates: []predicate.Resource{}}
}
func (p *PredicateResource) Submit() []predicate.Resource {
	return p.predicates
}
func (p *PredicateResource) ApplyCreatedAt(at []int64) *PredicateResource {
	if at != nil && len(at) > 0 {
		start := time.UnixMilli(at[0])
		p.predicates = append(p.predicates, resource.CreatedAtGTE(start))
		if len(at) > 1 {
			end := time.UnixMilli(at[1])
			p.predicates = append(p.predicates, resource.CreatedAtLTE(end))
		}
	}
	return p
}
func (p *PredicateResource) ApplyUpdatedAt(at []int64) *PredicateResource {
	if at != nil && len(at) > 0 {
		start := time.UnixMilli(at[0])
		p.predicates = append(p.predicates, resource.UpdatedAtGTE(start))
		if len(at) > 1 {
			end := time.UnixMilli(at[1])
			p.predicates = append(p.predicates, resource.UpdatedAtLTE(end))
		}
	}
	return p
}
func (p *PredicateResource) Apply(c bool, f func() predicate.Resource) *PredicateResource {
	if c {
		p.predicates = append(p.predicates, f())
	}
	return p
}

type PredicateRole struct {
	predicates []predicate.Role
}

func NewPredicateRole() *PredicateRole {
	return &PredicateRole{predicates: []predicate.Role{}}
}
func (p *PredicateRole) Submit() []predicate.Role {
	return p.predicates
}
func (p *PredicateRole) ApplyCreatedAt(at []int64) *PredicateRole {
	if at != nil && len(at) > 0 {
		start := time.UnixMilli(at[0])
		p.predicates = append(p.predicates, role.CreatedAtGTE(start))
		if len(at) > 1 {
			end := time.UnixMilli(at[1])
			p.predicates = append(p.predicates, role.CreatedAtLTE(end))
		}
	}
	return p
}
func (p *PredicateRole) ApplyUpdatedAt(at []int64) *PredicateRole {
	if at != nil && len(at) > 0 {
		start := time.UnixMilli(at[0])
		p.predicates = append(p.predicates, role.UpdatedAtGTE(start))
		if len(at) > 1 {
			end := time.UnixMilli(at[1])
			p.predicates = append(p.predicates, role.UpdatedAtLTE(end))
		}
	}
	return p
}
func (p *PredicateRole) Apply(c bool, f func() predicate.Role) *PredicateRole {
	if c {
		p.predicates = append(p.predicates, f())
	}
	return p
}

type PredicateUser struct {
	predicates []predicate.User
}

func NewPredicateUser() *PredicateUser {
	return &PredicateUser{predicates: []predicate.User{}}
}
func (p *PredicateUser) Submit() []predicate.User {
	return p.predicates
}
func (p *PredicateUser) ApplyCreatedAt(at []int64) *PredicateUser {
	if at != nil && len(at) > 0 {
		start := time.UnixMilli(at[0])
		p.predicates = append(p.predicates, user.CreatedAtGTE(start))
		if len(at) > 1 {
			end := time.UnixMilli(at[1])
			p.predicates = append(p.predicates, user.CreatedAtLTE(end))
		}
	}
	return p
}
func (p *PredicateUser) ApplyUpdatedAt(at []int64) *PredicateUser {
	if at != nil && len(at) > 0 {
		start := time.UnixMilli(at[0])
		p.predicates = append(p.predicates, user.UpdatedAtGTE(start))
		if len(at) > 1 {
			end := time.UnixMilli(at[1])
			p.predicates = append(p.predicates, user.UpdatedAtLTE(end))
		}
	}
	return p
}
func (p *PredicateUser) Apply(c bool, f func() predicate.User) *PredicateUser {
	if c {
		p.predicates = append(p.predicates, f())
	}
	return p
}
