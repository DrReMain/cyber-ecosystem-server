// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/DrReMain/cyber-ecosystem-server/rpc/admin_system/ent/menu"
)

// Menu is the model entity for the Menu schema.
type Menu struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Sort holds the value of the "sort" field.
	Sort uint32 `json:"sort,omitempty"`
	// Status | 1 正常 2 禁用
	Status uint8 `json:"status,omitempty"`
	// Menu title
	Title string `json:"title,omitempty"`
	// Menu icon
	Icon string `json:"icon,omitempty"`
	// Menu code
	Code string `json:"code,omitempty"`
	// Menu code path (code1_code2_code3)
	CodePath string `json:"code_path,omitempty"`
	// Parent MenuID
	ParentID *string `json:"parent_id,omitempty"`
	// Menu type (divider/group/menu/page/button)
	MenuType string `json:"menu_type,omitempty"`
	// Menu properties (JSON字符串)
	Properties string `json:"properties,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MenuQuery when eager-loading is set.
	Edges        MenuEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MenuEdges holds the relations/edges for other nodes in the graph.
type MenuEdges struct {
	// Roles holds the value of the roles edge.
	Roles []*Role `json:"roles,omitempty"`
	// Children holds the value of the children edge.
	Children []*Menu `json:"children,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Menu `json:"parent,omitempty"`
	// Resources holds the value of the resources edge.
	Resources []*Resource `json:"resources,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e MenuEdges) RolesOrErr() ([]*Role, error) {
	if e.loadedTypes[0] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e MenuEdges) ChildrenOrErr() ([]*Menu, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MenuEdges) ParentOrErr() (*Menu, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: menu.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ResourcesOrErr returns the Resources value or an error if the edge
// was not loaded in eager-loading.
func (e MenuEdges) ResourcesOrErr() ([]*Resource, error) {
	if e.loadedTypes[3] {
		return e.Resources, nil
	}
	return nil, &NotLoadedError{edge: "resources"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Menu) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case menu.FieldSort, menu.FieldStatus:
			values[i] = new(sql.NullInt64)
		case menu.FieldID, menu.FieldTitle, menu.FieldIcon, menu.FieldCode, menu.FieldCodePath, menu.FieldParentID, menu.FieldMenuType, menu.FieldProperties:
			values[i] = new(sql.NullString)
		case menu.FieldCreatedAt, menu.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Menu fields.
func (_m *Menu) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case menu.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case menu.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case menu.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case menu.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				_m.Sort = uint32(value.Int64)
			}
		case menu.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = uint8(value.Int64)
			}
		case menu.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case menu.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				_m.Icon = value.String
			}
		case menu.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				_m.Code = value.String
			}
		case menu.FieldCodePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code_path", values[i])
			} else if value.Valid {
				_m.CodePath = value.String
			}
		case menu.FieldParentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				_m.ParentID = new(string)
				*_m.ParentID = value.String
			}
		case menu.FieldMenuType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field menu_type", values[i])
			} else if value.Valid {
				_m.MenuType = value.String
			}
		case menu.FieldProperties:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field properties", values[i])
			} else if value.Valid {
				_m.Properties = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Menu.
// This includes values selected through modifiers, order, etc.
func (_m *Menu) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryRoles queries the "roles" edge of the Menu entity.
func (_m *Menu) QueryRoles() *RoleQuery {
	return NewMenuClient(_m.config).QueryRoles(_m)
}

// QueryChildren queries the "children" edge of the Menu entity.
func (_m *Menu) QueryChildren() *MenuQuery {
	return NewMenuClient(_m.config).QueryChildren(_m)
}

// QueryParent queries the "parent" edge of the Menu entity.
func (_m *Menu) QueryParent() *MenuQuery {
	return NewMenuClient(_m.config).QueryParent(_m)
}

// QueryResources queries the "resources" edge of the Menu entity.
func (_m *Menu) QueryResources() *ResourceQuery {
	return NewMenuClient(_m.config).QueryResources(_m)
}

// Update returns a builder for updating this Menu.
// Note that you need to call Menu.Unwrap() before calling this method if this Menu
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Menu) Update() *MenuUpdateOne {
	return NewMenuClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Menu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Menu) Unwrap() *Menu {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Menu is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Menu) String() string {
	var builder strings.Builder
	builder.WriteString("Menu(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sort=")
	builder.WriteString(fmt.Sprintf("%v", _m.Sort))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("icon=")
	builder.WriteString(_m.Icon)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(_m.Code)
	builder.WriteString(", ")
	builder.WriteString("code_path=")
	builder.WriteString(_m.CodePath)
	builder.WriteString(", ")
	if v := _m.ParentID; v != nil {
		builder.WriteString("parent_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("menu_type=")
	builder.WriteString(_m.MenuType)
	builder.WriteString(", ")
	builder.WriteString("properties=")
	builder.WriteString(_m.Properties)
	builder.WriteByte(')')
	return builder.String()
}

// Menus is a parsable slice of Menu.
type Menus []*Menu
